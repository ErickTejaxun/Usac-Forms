/* excelParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. excelParserTokenManager.java */
package Analizadores.idPregunta;
import java.io.ByteArrayInputStream;
import java.io.InputStream;

/** Token Manager. */
@SuppressWarnings("unused")public class excelParserTokenManager implements excelParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 28);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x4L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x2L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x4L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x6L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(3, 1);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(9, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 3;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0){
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 44:
         return jjStopAtPos(0, 22);
      case 46:
         return jjStopAtPos(0, 23);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 2:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 24;
                  { jjCheckNAdd(2); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 19;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAdd(1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7fff0L) != 0L)
         {
            jjmatchedKind = 19;
            return 1;
         }
         return -1;
      case 1:
         if ((active0 & 0x7fff0L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
            return 1;
         }
         return -1;
      case 2:
         if ((active0 & 0x7fff0L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 2;
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0x7bbf0L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 3;
            return 1;
         }
         if ((active0 & 0x4400L) != 0L)
            return 1;
         return -1;
      case 4:
         if ((active0 & 0x7b160L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 19;
               jjmatchedPos = 4;
            }
            return 1;
         }
         if ((active0 & 0xa90L) != 0L)
            return 1;
         return -1;
      case 5:
         if ((active0 & 0x7b940L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 5;
            return 1;
         }
         if ((active0 & 0x20L) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active0 & 0x53900L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 6;
            return 1;
         }
         if ((active0 & 0x28040L) != 0L)
            return 1;
         return -1;
      case 7:
         if ((active0 & 0x43900L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 7;
            return 1;
         }
         if ((active0 & 0x10000L) != 0L)
            return 1;
         return -1;
      case 8:
         if ((active0 & 0x3000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 8;
            return 1;
         }
         if ((active0 & 0x40900L) != 0L)
            return 1;
         return -1;
      case 9:
         if ((active0 & 0x3000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 9;
            return 1;
         }
         return -1;
      case 10:
         if ((active0 & 0x3000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 10;
            return 1;
         }
         return -1;
      case 11:
         if ((active0 & 0x3000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 11;
            return 1;
         }
         return -1;
      case 12:
         if ((active0 & 0x3000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 12;
            return 1;
         }
         return -1;
      case 13:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 13;
            return 1;
         }
         if ((active0 & 0x1000L) != 0L)
            return 1;
         return -1;
      case 14:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 14;
            return 1;
         }
         return -1;
      case 15:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 15;
            return 1;
         }
         return -1;
      case 16:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 16;
            return 1;
         }
         return -1;
      case 17:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 17;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0){
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 44:
         return jjStopAtPos(0, 22);
      case 46:
         return jjStopAtPos(0, 23);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_1(0x10100L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_1(0x40L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_1(0x20L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_1(0x48a00L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_1(0x400L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_1(0x20000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_1(0x4000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_1(0x80L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_1(0x3000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_1(0x10L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x10080L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x3a50L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x48000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_1(active0, 0x20020L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_1(active0, 0x4500L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_1(active0, 0x8a40L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x20000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x13000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0x40180L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_1(active0, 0x400L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_1(active0, 0x4020L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_1(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_1(3, 10, 1);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_1(3, 14, 1);
         return jjMoveStringLiteralDfa4_1(active0, 0x40000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_1(active0, 0x30000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_1(active0, 0x100L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_1(active0, 0x3020L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_1(active0, 0x80L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_1(active0, 0x8a00L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0x40L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_1(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x800L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_1(active0, 0x3000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_1(active0, 0x8000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x20100L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_1(active0, 0x40000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_1(active0, 0x40L);
      case 79:
      case 111:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_1(4, 4, 1);
         else if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_1(4, 7, 1);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_1(active0, 0x20L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_1(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0);
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_1(active0, 0x20040L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_1(active0, 0x3100L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa6_1(active0, 0x800L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0x40000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_1(active0, 0x10000L);
      case 79:
      case 111:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_1(5, 5, 1);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_1(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0);
}
private int jjMoveStringLiteralDfa6_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_1(active0, 0x10000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_1(active0, 0x3100L);
      case 76:
      case 108:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_1(6, 6, 1);
         break;
      case 79:
      case 111:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(6, 15, 1);
         return jjMoveStringLiteralDfa7_1(active0, 0x800L);
      case 82:
      case 114:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_1(6, 17, 1);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_1(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_1(5, active0);
}
private int jjMoveStringLiteralDfa7_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_1(active0, 0x40000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_1(active0, 0x3100L);
      case 82:
      case 114:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_1(7, 16, 1);
         return jjMoveStringLiteralDfa8_1(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_1(6, active0);
}
private int jjMoveStringLiteralDfa8_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(8, 11, 1);
         break;
      case 78:
      case 110:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(8, 8, 1);
         return jjMoveStringLiteralDfa9_1(active0, 0x3000L);
      case 82:
      case 114:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_1(8, 18, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_1(7, active0);
}
private int jjMoveStringLiteralDfa9_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_1(active0, 0x3000L);
      default :
         break;
   }
   return jjStartNfa_1(8, active0);
}
private int jjMoveStringLiteralDfa10_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_1(active0, 0x3000L);
      default :
         break;
   }
   return jjStartNfa_1(9, active0);
}
private int jjMoveStringLiteralDfa11_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 77:
      case 109:
         return jjMoveStringLiteralDfa12_1(active0, 0x2000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_1(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_1(10, active0);
}
private int jjMoveStringLiteralDfa12_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_1(active0, 0x1000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa13_1(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_1(11, active0);
}
private int jjMoveStringLiteralDfa13_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa14_1(active0, 0x2000L);
      case 79:
      case 111:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(13, 12, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_1(12, active0);
}
private int jjMoveStringLiteralDfa14_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa15_1(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_1(13, active0);
}
private int jjMoveStringLiteralDfa15_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_1(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_1(14, active0);
}
private int jjMoveStringLiteralDfa16_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 80:
      case 112:
         return jjMoveStringLiteralDfa17_1(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_1(15, active0);
}
private int jjMoveStringLiteralDfa17_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa18_1(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_1(16, active0);
}
private int jjMoveStringLiteralDfa18_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_1(18, 13, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_1(17, active0);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 2:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 24;
                  { jjCheckNAdd(2); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 19;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAdd(1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0){
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_3(0x4000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_3(0x8000000L);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_3(active0, 0x4000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_3(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_3(0, active0);
}
private int jjMoveStringLiteralDfa2_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_3(active0, 0x8000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_3(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_3(1, active0);
}
private int jjMoveStringLiteralDfa3_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_3(active0, 0x8000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_3(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_3(2, active0);
}
private int jjMoveStringLiteralDfa4_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(4, 27);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_3(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_3(3, active0);
}
private int jjMoveStringLiteralDfa5_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_3(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_3(4, active0);
}
private int jjMoveStringLiteralDfa6_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_3(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_3(5, active0);
}
private int jjMoveStringLiteralDfa7_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_3(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_3(6, active0);
}
private int jjMoveStringLiteralDfa8_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_3(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_3(7, active0);
}
private int jjMoveStringLiteralDfa9_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(9, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_3(8, active0);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 25;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\54", "\56", null, null, null, 
null, "\42", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

    /** Constructor. */
    public excelParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public excelParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 3; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "TIPO",
   "IDPREGUNTA",
   "AGCI",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x1ccffff7L, 
};
static final long[] jjtoSkip = {
   0x3000008L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[3];
    private final int[] jjstateSet = new int[2 * 3];

    
    protected char curChar;
}
