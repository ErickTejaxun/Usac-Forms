
/*
 * Copyright © 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */


options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = true;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = true;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(excelParser)
package Analizadores;

import java.io.InputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
public class excelParser
{
    public static void main(String[] args) throws ParseException, FileNotFoundException 
    {     
    }
    public static void analizar()
    {
        try
        {
            excelParser analizador =  excelParser(System.in);
            analizador.inicio();
        }
        catch(ParseException error)
        {
            System.out.println(error.getMessage());
            System.out.println("Errores en la entrada");
        }

    }
}

PARSER_END(excelParser)


/*
<ESTADO> -- ESTADO es el nombre del estado en el que vamos a declarar las reglas léxicas.
SKIP: ignora el no terminal
MORE: encicla en una producción 
TOKEN: tokens
TOKEN_ESPCIAL: saber
*/

SKIP: // Saltar a un estado auxiliar
{
    "<"{}:EHOJA
}

SKIP:
{
    <(" " | "\t" | "\n" | "\r" )+>
}

<EHOJA>TOKEN: 
{
    <IENCUESTA:"encuesta">:ENCUESTA_ 
}

<ENCUESTA_>SKIP:
{
    ">":ENCUESTA    
}

<ENCUESTA>SKIP:
{
    "<":PREG1
}


<PREG1>TOKEN:
{
    <IPREGUNTA:"pregunta">:PREG2
}

<PREG2>SKIP:
{
    ">":PREG3
}

<PREG3>SKIP:
{
    "<":CELDAP    
}

<CELDAP>:SKIP:
{
    "/":PREG5
}

<PREG5>TOKEN:
{
    <FENCUESTA:"encuesta">:PREG6
}
<PREG6>SKIP:
{
    ">":ENCUESTA
}

<CELDAP>TOKEN:
{
    <ITIPO:"tipo">:TIPO1
}

<TIPO1>SKIP:
{
    ">":TIPO2    
}

<TIPO2>SKIP:
{
    "\"":LF1    
}

<LF1>SKIP:
{
    "<":TIPO3
}

<LF1>TOKEN:
{
    <PUNTO:".">:LF2
}

<LF2>TOKEN:
{
    <ID>:LF3
}

<LF3>SKIP:
{
    "\"":LF1
}

<LF3>TOKEN:
{
    <COMA:",">:LF1
}


<TIPO2>TOKEN:
{
     <fecha:"fecha">
    |<texto:"texto">
    |<entero:"entero">
    |<decimal:"decimal">
    |<rango:"rango">
    |<condicion:"condicion">
    |<hora:"hora">
    |<fechahora:"fechahora">
    |<seleccion_uno:"seleccionar_uno">
    |<seleccion_multiples:"seleccion_multiples">
    |<nota:"nota">
    |<fichero:"fichero">
    |<calcular:"calcular">
    |<iniciar_agrupacion:"iniciar agrupacion">
    |<finalizar_agrupacon:"finalizar agrupacion">
    |<iniciar_ciclo:"iniciar ciclo">
    |<finalizar_ciclo:"finalizar ciclo">
    |<ID>:LID1    
}


<LDI1>TOKEN:
{
    <COMA>:LID2
}

<LD2>TOKEN:
{
    <ID>:LID1
}

<LID1>SKIP:
{
    "<":TIPO3
}

<TIPO2>SKIP:
{
    "<":TIPO3
}

<TIPO3>SKIP:
{
    "/":TIPO4
}
<TIPO4>TOKEN:
{
    <FTIPO:"tipo">:TIPO5
}

<TIPO5>SKIP:
{
    ">":PREG3
}



/*Area de analis sintactico. */
void inicio():
{}
{
    <IENCUESTA>lpreg()<FENCUESTA><EOF>
}

void lpreg():
{}
{
    <IPREGUNTA> lceldasP() <FPREGUNTA>
}










