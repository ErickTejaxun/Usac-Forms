/* parseParametroTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. parseParametroTokenManager.java */
package Analizadores.Parametro;
import AST.Nodo;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.ArrayList;

/** Token Manager. */
@SuppressWarnings("unused")public class parseParametroTokenManager implements parseParametroConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x618c1fc00L) != 0L)
         {
            jjmatchedKind = 43;
            return 37;
         }
         return -1;
      case 1:
         if ((active0 & 0x18010000L) != 0L)
            return 38;
         if ((active0 & 0x600c0fc00L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 43;
               jjmatchedPos = 1;
            }
            return 38;
         }
         return -1;
      case 2:
         if ((active0 & 0x600008000L) != 0L)
            return 38;
         if ((active0 & 0xc17c00L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
            return 38;
         }
         return -1;
      case 3:
         if ((active0 & 0xc17c00L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
            return 38;
         }
         return -1;
      case 4:
         if ((active0 & 0x810000L) != 0L)
            return 38;
         if ((active0 & 0x407c00L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 4;
            return 38;
         }
         return -1;
      case 5:
         if ((active0 & 0x407c00L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 5;
            return 38;
         }
         return -1;
      case 6:
         if ((active0 & 0x404800L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 6;
            return 38;
         }
         if ((active0 & 0x3400L) != 0L)
            return 38;
         return -1;
      case 7:
         if ((active0 & 0x800L) != 0L)
            return 38;
         if ((active0 & 0x404000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 7;
            return 38;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 40;
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 40:
         return jjStopAtPos(0, 41);
      case 41:
         return jjStopAtPos(0, 42);
      case 42:
         return jjStopAtPos(0, 32);
      case 43:
         return jjStopAtPos(0, 29);
      case 45:
         return jjStopAtPos(0, 31);
      case 46:
         jjmatchedKind = 7;
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 60:
         jjmatchedKind = 37;
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 61:
         return jjStopAtPos(0, 35);
      case 62:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 94:
         return jjStopAtPos(0, 30);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1c00L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x804000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x8010000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x408000L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         break;
      case 46:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      case 61:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         break;
      case 95:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x801c00L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      case 73:
      case 105:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x200014000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 79:
      case 111:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(1, 28, 38);
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L);
      case 124:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 68:
      case 100:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 38);
         return jjMoveStringLiteralDfa3_0(active0, 0x1c00L);
      case 70:
      case 102:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 38);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 86:
      case 118:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 33, 38);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x1c00L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x1400L);
      case 79:
      case 111:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 38);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 38);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x2400L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x5800L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 78:
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 38);
         break;
      case 82:
      case 114:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 13, 38);
         break;
      case 88:
      case 120:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 38);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 11, 38);
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 22, 38);
         break;
      case 82:
      case 114:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 14, 38);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 162;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                     { jjCheckNAdd(0); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(3, 11); }
                  else if (curChar == 39)
                     { jjAddStates(12, 20); }
                  else if (curChar == 35)
                     { jjCheckNAdd(28); }
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 16;
                  if ((0x6000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 37:
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAdd(38); }
                  break;
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  { jjCheckNAdd(0); }
                  break;
               case 2:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAdd(3); }
                  break;
               case 3:
                  if (curChar == 47)
                     { jjAddStates(21, 22); }
                  break;
               case 4:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAdd(6); }
                  break;
               case 6:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x6000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 11:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x7000000000000L & l) != 0L)
                     { jjCheckNAdd(6); }
                  break;
               case 13:
                  if ((0x6000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(3); }
                  break;
               case 15:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAdd(3); }
                  break;
               case 17:
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(19); }
                  break;
               case 19:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 25:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0xf000000000000L & l) != 0L)
                     { jjCheckNAdd(19); }
                  break;
               case 27:
                  if (curChar == 35)
                     { jjCheckNAdd(28); }
                  break;
               case 28:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(28, 29); }
                  break;
               case 30:
                  if ((0x100002600L & l) != 0L)
                     { jjAddStates(23, 24); }
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(33, 34); }
                  break;
               case 34:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(34, 35); }
                  break;
               case 39:
                  if (curChar == 39)
                     { jjAddStates(12, 20); }
                  break;
               case 40:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAdd(42); }
                  break;
               case 42:
                  if (curChar == 47)
                     { jjAddStates(25, 26); }
                  break;
               case 43:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAdd(45); }
                  break;
               case 45:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 46:
                  if ((0x6000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(50); }
                  break;
               case 50:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddStates(27, 29); }
                  break;
               case 51:
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(53); }
                  break;
               case 53:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 54:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 57:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 59:
                  if (curChar == 39 && kind > 2)
                     kind = 2;
                  break;
               case 60:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0xf000000000000L & l) != 0L)
                     { jjCheckNAdd(53); }
                  break;
               case 62:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 63:
                  if ((0x7000000000000L & l) != 0L)
                     { jjCheckNAdd(45); }
                  break;
               case 64:
                  if ((0x6000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(42); }
                  break;
               case 66:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 67:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAdd(42); }
                  break;
               case 68:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 69:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAdd(70); }
                  break;
               case 70:
                  if (curChar == 47)
                     { jjAddStates(30, 31); }
                  break;
               case 71:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 72:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAdd(73); }
                  break;
               case 73:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 74:
                  if ((0x6000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 78:
                  if (curChar == 39 && kind > 3)
                     kind = 3;
                  break;
               case 79:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 80:
                  if ((0x7000000000000L & l) != 0L)
                     { jjCheckNAdd(73); }
                  break;
               case 81:
                  if ((0x6000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(70); }
                  break;
               case 83:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 84:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAdd(70); }
                  break;
               case 85:
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(87); }
                  break;
               case 87:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 88:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 90:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 91:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 93:
                  if (curChar == 39 && kind > 4)
                     kind = 4;
                  break;
               case 94:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 95:
                  if ((0xf000000000000L & l) != 0L)
                     { jjCheckNAdd(87); }
                  break;
               case 96:
                  jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 97:
                  if (curChar == 39 && kind > 19)
                     kind = 19;
                  break;
               case 98:
                  if (curChar == 34)
                     { jjCheckNAddStates(3, 11); }
                  break;
               case 99:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 100:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAdd(101); }
                  break;
               case 101:
                  if (curChar == 47)
                     { jjAddStates(32, 33); }
                  break;
               case 102:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 103:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAdd(104); }
                  break;
               case 104:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 105:
                  if ((0x6000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 107:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 108:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(109); }
                  break;
               case 109:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddStates(34, 36); }
                  break;
               case 110:
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(112); }
                  break;
               case 112:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 115:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 116:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 118:
                  if (curChar == 34 && kind > 2)
                     kind = 2;
                  break;
               case 119:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 120:
                  if ((0xf000000000000L & l) != 0L)
                     { jjCheckNAdd(112); }
                  break;
               case 121:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 122:
                  if ((0x7000000000000L & l) != 0L)
                     { jjCheckNAdd(104); }
                  break;
               case 123:
                  if ((0x6000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 124:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(101); }
                  break;
               case 125:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 126:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAdd(101); }
                  break;
               case 127:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 128:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAdd(129); }
                  break;
               case 129:
                  if (curChar == 47)
                     { jjAddStates(37, 38); }
                  break;
               case 130:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 131:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAdd(132); }
                  break;
               case 132:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 133:
                  if ((0x6000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 134:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 135:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 136:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 137:
                  if (curChar == 34 && kind > 3)
                     kind = 3;
                  break;
               case 138:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 139:
                  if ((0x7000000000000L & l) != 0L)
                     { jjCheckNAdd(132); }
                  break;
               case 140:
                  if ((0x6000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 141:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(129); }
                  break;
               case 142:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 143:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAdd(129); }
                  break;
               case 144:
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 145:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(146); }
                  break;
               case 146:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 147:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 148:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 149:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 150:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 151:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 152:
                  if (curChar == 34 && kind > 4)
                     kind = 4;
                  break;
               case 153:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 154:
                  if ((0xf000000000000L & l) != 0L)
                     { jjCheckNAdd(146); }
                  break;
               case 155:
                  { jjCheckNAddTwoStates(155, 156); }
                  break;
               case 156:
                  if (curChar == 34 && kind > 20)
                     kind = 20;
                  break;
               case 157:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 158:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  { jjCheckNAdd(158); }
                  break;
               case 159:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(159, 160); }
                  break;
               case 160:
                  if (curChar != 46)
                     break;
                  if (kind > 18)
                     kind = 18;
                  { jjCheckNAdd(161); }
                  break;
               case 161:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  { jjCheckNAdd(161); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddTwoStates(37, 38); }
                  break;
               case 37:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(38); }
                  }
                  if (curChar == 95)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(38); }
                  }
                  break;
               case 29:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 31:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(39, 41); }
                  break;
               case 32:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(33, 34); }
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(33, 34); }
                  break;
               case 35:
                  if (curChar == 93 && kind > 9)
                     kind = 9;
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAdd(38); }
                  break;
               case 96:
                  jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 155:
                  { jjAddStates(42, 43); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 96:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 155:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(42, 43); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 162 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   158, 159, 160, 99, 123, 125, 127, 140, 142, 144, 153, 155, 40, 64, 66, 68, 
   81, 83, 85, 94, 96, 4, 11, 30, 31, 43, 62, 50, 51, 60, 71, 79, 
   102, 121, 109, 110, 119, 130, 138, 32, 33, 34, 155, 156, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\56", "\56\56", null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, "\41\75", 
"\76\75", "\74\75", null, null, "\53", "\136", "\55", "\52", null, null, "\75", "\76", 
"\74", "\46\46", "\174\174", "\41", "\50", "\51", null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public parseParametroTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public parseParametroTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 162; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffdffffdL, 
};
static final long[] jjtoSkip = {
   0x2L, 
};
static final long[] jjtoSpecial = {
   0x2L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[162];
    private final int[] jjstateSet = new int[2 * 162];

    
    protected char curChar;
}
