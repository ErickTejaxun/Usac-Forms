options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = true;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(parserEtiqueta)

package Analizadores.Etiqueta;
import AST.Nodo;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.ArrayList;

public class parserEtiqueta 
{    
    public String cadenaAuxiliar="";    
    public static Nodo main(String args[]) throws ParseException
    {
        if(args.length>0)
        {

            InputStream data = new ByteArrayInputStream(args[0].getBytes());
            parserEtiqueta analizador = new parserEtiqueta(data);
            return analizador.Etiqueta();   
        }
        else
        {
            try
            {
                parserEtiqueta analizador = new parserEtiqueta(System.in);
                analizador.Etiqueta();
            }
            catch (ParseException e)
            {
                System.out.println(e.getMessage());
                System.out.println("Errores------------------");
            }              
        }
        return null;
    }

    void errorPanico(int tokenSinc) 
    { 
        ParseException e = generateParseException();     
        Token t; 
        do 
        {
            t = getNextToken();
        } 
        while (t.kind != tokenSinc);
    }

    public void imprimir(String mensaje)
    {
        System.out.println(mensaje);
    }   

}
PARSER_END(parserEtiqueta)

<PAR,DEFAULT>SPECIAL_TOKEN:
{
    <ESPACIO:(" " | "\t" | "\n" | "\r" )+>
}
TOKEN :
{
    <numeral : "#">
    |<corchA : "[" >
    |<corchC : "]" >
    |<punto: ".">
    |<doblepunto: "..">
    |<arroba: "@">
    |<llaveA: "{">
    |<llaveC: "}">
    |<parA: "(">
    |<parC: ")">
    |<Cualquiera : (~["{","}","#",".", "[", "]","(",")", "@", " "])+>        
    |<ID: (["a"-"z","A"-"Z"]("_")?)(["a"-"z","A"-"Z"]|["0"- "9"]|"_")*>    
}
Nodo Etiqueta() :
{
    Nodo Cad;
    Nodo nuevo;
    Token t= null;
}
{
    (Cad = ETQ()
        {
            nuevo = Cad;
        }
        )+ <EOF> 
    {                   
    
        ArrayList<Nodo> hijos = new ArrayList();
        nuevo = Cad;
        //nuevo.getHijos().clear();
        Nodo auxiliar = new Nodo("cadena","",0,0);
        for(Nodo nodo : Cad.getHijos())
        {
            if(nodo.getTipo().equals("cadena"))
            {
                auxiliar.setValue(auxiliar.getValue()+" "+nodo.getValue());
            }
            else
            {
                if(!auxiliar.getValue().equals(""))
                {
                    hijos.add(auxiliar);
                    hijos.add(nodo);
                    auxiliar = new Nodo("cadena","",0,0);
                }
                else
                {
                    hijos.add(nodo);
                }
            }
        }
        if(!auxiliar.getValue().equals(""))
        {
            hijos.add(auxiliar);
        }
        nuevo.getHijos().clear();
        nuevo.setListaHijos(hijos); 
        return nuevo;
    }
|   
    {
        return new Nodo("etiqueta","etiqueta",0,0);
    }
}


Nodo ETQ() :
{
    String Cad;
    String aux;
    Nodo nuevo = null;
    Nodo derecha = null;
    Nodo izquierda = null;
}
{
    izquierda = T() derecha = ETQ2() 
    {
        nuevo = new Nodo("etiqueta","etiqueta",0,0);
        if(izquierda.getTipo().equals("funcion"))
        {
            nuevo.add(izquierda);
        }
        else
        {
            if(izquierda.getHijos().isEmpty())
            {
                nuevo.add(izquierda);
            }
            else
            {
                for(Nodo ni: izquierda.getHijos())
                {
                    if(!ni.getTipo().equals("vacio"))
                    {
                        nuevo.add(ni);
                    }   
                }
            }
        }
        if(derecha.getTipo().equals("funcion"))
        {
            nuevo.add(derecha);
        }
        else
        {
            if(derecha.getHijos().isEmpty())
            {
                nuevo.add(derecha);
            }
            else
            {
                for(Nodo nd: derecha.getHijos())
                {
                    if(!nd.getTipo().equals("vacio"))
                    {
                        nuevo.add(nd);
                    }                   
                }
            } 
        }
        return nuevo;
    }    
}


Nodo ETQ2() :
{
    String Cad;
    String aux;
    Nodo izquierdo = null;
    Nodo derecho = null;
    Nodo nuevo  = null;
}
{
        izquierdo = T()  derecho= ETQ2() 
        {   
            nuevo = new Nodo("ET2","ET2",0,0); 
            if(izquierdo.getTipo().equals("funcion"))
            {
                nuevo.add(izquierdo);
            }
            else
            {
                if(izquierdo.getHijos().isEmpty())
                {
                    nuevo.add(izquierdo);
                }
                else
                {
                    for(Nodo ni: izquierdo.getHijos())
                    {
                        if(!ni.getTipo().equals("vacio"))
                        {
                            nuevo.add(ni);
                        }                    
                    }                                
                }
            }
            
            if(derecho.getTipo().equals("funcion"))
            {
                nuevo.add(derecho);
            }
            else
            {
                for(Nodo nd: derecho.getHijos())
                {
                    nuevo.add(nd);
                }                         
            }
            return nuevo;
        }
    |   <EOF> 
    {
        nuevo = new Nodo("vacio","vacio",0,0);
        return nuevo;
    }
}

Nodo T() :
{
    String auxiliar;    
    Nodo nuevo = null;
    Nodo aux = null;
    Token t = null;
    Token t2= null;
    Token t1=null;
}
{
    /*
    t=<Cualquiera> 
    {        
        nuevo = new Nodo("cadena",t.image, t.beginColumn, t.beginLine);
        return nuevo;
    }*/
     t=<Cualquiera>(t1=<parA>(aux = listaParametros())?t2=<parC>)?
    {
        if(t1!=null && t2!=null)
        {
            nuevo = new Nodo("funcion",t.image+"()", t.beginColumn, t.beginLine);
            if(aux !=null)
            {
                nuevo.add(aux);   
                nuevo.setTipo(nuevo.getTipo());
            }
            return nuevo;
        }
        else
        {
            nuevo = new Nodo("cadena",t.image, t.beginColumn, t.beginLine);
            return nuevo;
        }                
    }
    | t=<punto> 
    {         
         nuevo = new Nodo("var",".",t.beginColumn, t.beginLine);
         return nuevo;
    }
    | t=<doblepunto> 
    { 
       nuevo = new Nodo("var","padre",t.beginColumn, t.beginLine);
       return nuevo;
    }

    |t1=<llaveC> (t2=<arroba>|t2=<Cualquiera>)
    {                
        nuevo = new Nodo("cadena",t1.image + t2.image,t1.beginColumn, t1.beginLine);
        return nuevo;
    }
    | LOOKAHEAD(2)t1=<arroba> t2=<llaveA>
    {
        nuevo = new Nodo("cadena","@{", t1.beginColumn, t1.beginLine);
        return nuevo;        
    }  
    | t1=<arroba> 
    { 
       nuevo = new Nodo("var","this",t1.beginColumn, t1.beginLine);
       return nuevo;
    }
    |t=<llaveA>
    {
        nuevo = new Nodo("cadena",t.image, t.beginColumn, t.beginLine);
        return nuevo;
    }
    | t=<numeral> aux = ET3() 
    {          
        return aux;
    }

}


Nodo ET3():
{
    Nodo nuevo = null;
    Token t = null;
}

{
    <corchA>t=<Cualquiera><corchC>
    {
        nuevo = new Nodo("var",t.image, t.beginColumn, t.beginLine);
        System.out.println("Invocando variable: "+t.image);
        return nuevo;
    }
    |t=<Cualquiera> 
    {                      
        nuevo = new Nodo("cadena","#"+t.image, t.beginColumn, t.beginLine);
        return nuevo;
    }
}


Nodo listaParametros():
{
    Nodo auxiliar = null;
    Nodo nuevo = null;
    Token t = null;

}
{
    t=<Cualquiera>
    {
        nuevo = new Nodo("parametro",t.image, t.beginColumn, t.beginLine);
        return nuevo;
    }   

}
