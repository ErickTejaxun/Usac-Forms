options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = true;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(parserEtiqueta)

package Analizadores.Etiqueta;
import AST.Nodo;
import java.io.ByteArrayInputStream;
import java.io.InputStream;

public class parserEtiqueta 
{    
    public String cadenaAuxiliar="";
    public Nodo raiz = new Nodo("etiqueta","etiqueta",0,0);
    public static Nodo main(String args[]) throws ParseException
    {
        if(args.length>0)
        {

            InputStream data = new ByteArrayInputStream(args[0].getBytes());
            parserEtiqueta analizador = new parserEtiqueta(data);
            return analizador.Etiqueta();   
        }
        else
        {
            try
            {
                parserEtiqueta analizador = new parserEtiqueta(System.in);
                analizador.Etiqueta();
            }
            catch (ParseException e)
            {
                System.out.println(e.getMessage());
                System.out.println("Errores------------------");
            }              
        }
        return null;
    }

    void errorPanico(int tokenSinc) 
    { 
        ParseException e = generateParseException();     
        Token t; 
        do 
        {
            t = getNextToken();
        } 
        while (t.kind != tokenSinc);
    }

    public void imprimir(String mensaje)
    {
        System.out.println(mensaje);
    }   

}
PARSER_END(parserEtiqueta)

SPECIAL_TOKEN:
{
    <ESPACIO:(" " | "\t" | "\n" | "\r" )+>
}


TOKEN :
{
    <numeral : "#">
    |<corchA : "[" >
    |<corchC : "]" >
    |<punto: ".">
    |<doblepunto: "..">
    |<Cualquiera : (~["#",".", "[", "]"])+>    
    |<ID: (["a"-"z","A"-"Z"]("_")?)(["a"-"z","A"-"Z"]|["0"- "9"]|"_")*>
    |<funcion_vacia:<ID><ESPACIO>":"<ESPACIO>"("<ESPACIO>")">
}


Nodo Etiqueta() :
{
    Nodo Cad;
    Nodo nuevo;
    Token t= null;
}
{
    (Cad = ETQ()
        {
            raiz.add(Cad);
        }
        )+ <EOF> 
    {                             
        return raiz;
    }
}


Nodo ETQ() :
{
    String Cad;
    String aux;
    Nodo nuevo = null;
    Nodo derecha = null;
    Nodo izquierda = null;
}
{
    izquierda = T() derecha = ETQ2() 
    {
        nuevo = new Nodo("etiqueta","etiqueta",0,0);
        nuevo.add(izquierda);
        if(!derecha.getTipo().equals("vacio"))
        {
            nuevo.add(derecha);   
        }       
        return nuevo;
    }    
}


Nodo ETQ2() :
{
    String Cad;
    String aux;
    Nodo izquierdo = null;
    Nodo derecho = null;
    Nodo nuevo  = null;
}
{
        izquierdo = T()  derecho= ETQ2() 
        {            
            if(!derecho.getTipo().equals("vacio"))
            {
                izquierdo.add(derecho);
            }
            return izquierdo;                
        }
    |   <EOF> 
    {
        nuevo = new Nodo("vacio","vacio",0,0);
        return nuevo;
    }
}

Nodo T() :
{
    String auxiliar;    
    Nodo nuevo = null;
    Nodo aux = null;
    Token t = null;
}
{
    t=<Cualquiera> 
    {        
        nuevo = new Nodo("cadena",t.image, t.beginColumn, t.beginLine);
        return nuevo;
    }
    | t=<punto> 
    {         
         nuevo = new Nodo("var","this",t.beginColumn, t.beginLine);
         return nuevo;
    }
    | t=<doblepunto> 
    { 
       nuevo = new Nodo("var","padre",t.beginColumn, t.beginLine);
       return nuevo;
    }
    | t=<funcion_vacia>
    {
        nuevo = new Nodo("funcion",t.image, t.beginColumn, t.beginLine);
        return nuevo;
    }
    | t=<numeral> aux = ET3() 
    {          
        return aux;
    }
}


Nodo ET3():
{
    Nodo nuevo = null;
    Token t = null;
}

{
    <corchA> t=<Cualquiera> <corchC>
    {
        nuevo = new Nodo("var",t.image, t.beginColumn, t.beginLine);
        return nuevo;
    }
    |t=<Cualquiera> 
    {                      
        nuevo = new Nodo("cadena",t.image, t.beginColumn, t.beginLine);
        return nuevo;
    }
}