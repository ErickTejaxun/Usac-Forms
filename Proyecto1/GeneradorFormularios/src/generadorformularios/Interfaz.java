/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package generadorformularios;


import Analizadores.idPregunta.idParser;
import Analizadores.idPregunta.ParseException;
import Analizadores.idPregunta.TokenMgrError;
import AST.dibujador;
import AST.Nodo;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;


import Analizadores.Tipo.parserTipo;

/**
 *
 * @author erick
 */
public class Interfaz extends javax.swing.JFrame {
    
    public ArrayList<Error> listaErrores = new ArrayList();
    private String archivoActual = "";
    public ArrayList<Pregunta> listaPreguntas = new ArrayList();
    ArrayList<String> listaEncabezadosPreguntas = new ArrayList();
    DefaultTableModel filasErrores;
    boolean encuestaFlag = true;    
    public Nodo raizArbol;            
    /**
     * Creates new form Interfaz
     */
    public Interfaz()
    {
        initComponents();
        
        filasErrores = new DefaultTableModel();        
        filasErrores.addColumn("Archivo");
        filasErrores.addColumn("LÃ­nea");
        filasErrores.addColumn("Columna");
        filasErrores.addColumn("Fila");
        filasErrores.addColumn("Celda");
        filasErrores.addColumn("Detalle"); 
        filasErrores.addColumn("Tipo");                 
        tablaErrores.setModel(filasErrores);        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        botonGuardar = new javax.swing.JButton();
        botonAbrir = new javax.swing.JButton();
        botonErrores = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        botonGenerar = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaErrores = new javax.swing.JTable();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        areaEdicion = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1000, 800));
        setName("frameInterfaz"); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        botonGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/guardar.png"))); // NOI18N
        jPanel1.add(botonGuardar);
        botonGuardar.setBounds(85, 12, 40, 40);

        botonAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/abrir.jpg"))); // NOI18N
        botonAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAbrirActionPerformed(evt);
            }
        });
        jPanel1.add(botonAbrir);
        botonAbrir.setBounds(11, 12, 40, 40);

        botonErrores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/error.png"))); // NOI18N
        jPanel1.add(botonErrores);
        botonErrores.setBounds(154, 12, 40, 40);

        jLabel1.setText("Abrir");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(11, 63, 40, 20);

        jLabel2.setText("Guardar");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(85, 58, 60, 20);

        jLabel3.setText("Errores");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(151, 58, 60, 20);

        botonGenerar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/run.png"))); // NOI18N
        botonGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGenerarActionPerformed(evt);
            }
        });

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new javax.swing.OverlayLayout(jPanel3));

        tablaErrores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaErrores);

        jPanel3.add(jScrollPane1);

        jTabbedPane2.addTab("Errores", jPanel3);

        jPanel2.add(jTabbedPane2, java.awt.BorderLayout.CENTER);

        jPanel4.setLayout(new java.awt.BorderLayout());

        areaEdicion.setColumns(20);
        areaEdicion.setRows(5);
        jScrollPane3.setViewportView(areaEdicion);

        jPanel4.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jTabbedPane3.addTab("Entrada", jPanel4);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1104, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 262, Short.MAX_VALUE)
        );

        jTabbedPane3.addTab("Salida", jPanel5);

        jPanel2.add(jTabbedPane3, java.awt.BorderLayout.PAGE_START);

        jTabbedPane1.addTab("Entrada", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 690, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(115, 115, 115)
                .addComponent(botonGenerar, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(botonGenerar)))
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 666, Short.MAX_VALUE)
                .addGap(31, 31, 31))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGenerarActionPerformed
        
        try {
            try 
            {
                analizar();
            } catch (Analizadores.Tipo.ParseException | Analizadores.Etiqueta.ParseException | Analizadores.idPregunta.ParseException  | Analizadores.Parametro.ParseException ex) 
            {
                Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
            }                                                            
        } catch (IOException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
        mostrarErrores();
        
                               
    }//GEN-LAST:event_botonGenerarActionPerformed

    private void botonAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAbrirActionPerformed
        try 
        {
            seleccionarArchivo();
        } 
        catch (IOException ex) 
        {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonAbrirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    
    // Todos mis metodos engazados.
    
    //Metodo para leer el archivo .xls :v
    
    public String leerArchivoXEncuesta(String path) throws FileNotFoundException, IOException
    {        
        String cadenaArchivo= "";               
        try(FileInputStream archivo = new FileInputStream(new File(path)))
        {
            //Leer el archivo plano de excel.                        
            XSSFWorkbook libro = new XSSFWorkbook(archivo);              
            XSSFSheet hojaActual = libro.getSheet("encuesta");  
            Iterator<Row> filaIterator = hojaActual.iterator();           
            Row fila; // Auxiliar para cada fila.
            int filaContador = 0;    // Contador de la fila                
            int colContador = 0;     // Contador de columna 
            int columna = 0;
            int fil = 0;
            Pregunta nuevaPregunta = null;            
            while(filaIterator.hasNext())
            {
                fila = filaIterator.next();
                //Ahora obtenemos las celdas de la fila.
                Iterator<Cell> celdaIterator = fila.cellIterator();
                Cell celda;
                //Obtenemos cada celda
                if(fila.getPhysicalNumberOfCells()>0)
                {
                    //if(filaContador>0){cadenaArchivo +=  "<fila>\n";}   
                    nuevaPregunta = new Pregunta();
                    while(celdaIterator.hasNext())
                    {
                        //Obtenemos el contenido de la celda.
                        celda = celdaIterator.next();                   
                        if(filaContador == 0)
                        {     
                            registrarEncabezado(celda.toString(), celda.getColumnIndex());                            
                        }
                        else                   
                        {
                            //nuevaPregunta.insertarAtributo(encabezados.get(celda.getColumnIndex()), celda.toString());
                            String valor = celda.toString(); 
                            columna = celda.getColumnIndex();
                            fil = celda.getRowIndex();
                            String encabezado = listaEncabezadosPreguntas.get(celda.getColumnIndex()).toLowerCase();
                            switch(encabezado)
                            {
                                case "tipo":
                                    nuevaPregunta.setTipo(valor);
                                    nuevaPregunta.setColumna("tipo", columna);
                                    break;
                                case "idpregunta":
                                    nuevaPregunta.setIdPregunta(valor);
                                    nuevaPregunta.setColumna("idpregunta", columna);
                                    break;               
                                case "etiqueta":                                    
                                    nuevaPregunta.setEtiqueta(valor);
                                    nuevaPregunta.setColumna("etiqueta", columna);
                                    break;
                                case "parametro":
                                    nuevaPregunta.setParametro(valor);
                                    nuevaPregunta.setColumna("parametro", columna);
                                    break;
                                case "calculo":
                                    nuevaPregunta.setCalculo(valor);
                                    nuevaPregunta.setColumna("calculo", columna);
                                    break;
                                case "aplicable":
                                    nuevaPregunta.setAplicable(valor);
                                    nuevaPregunta.setColumna("aplicable", columna);
                                    break;
                                case "sugerir":
                                    nuevaPregunta.setSugerir(valor);
                                    nuevaPregunta.setColumna("sugerir", columna);
                                    break;
                                case "restringir":
                                    nuevaPregunta.setRestringir(valor);
                                    nuevaPregunta.setColumna("restringir", columna);
                                    break;                
                                case "restringirmsn":
                                    nuevaPregunta.setRestringirmsn(valor);
                                    nuevaPregunta.setColumna("restringirmsn", columna);
                                    break;
                                case "requeridomsn":
                                    nuevaPregunta.setRequeridoMsn(valor);
                                    nuevaPregunta.setColumna("requeridomsn", columna);
                                    break;
                                case "requerido":
                                    nuevaPregunta.setRequerido(valor);
                                    nuevaPregunta.setColumna("requerido", columna);
                                    break;
                                case "predeterminado":
                                    nuevaPregunta.setPredeterminado(valor);
                                    nuevaPregunta.setColumna("predeterminado", columna);
                                    break;
                                case "lectura":
                                    nuevaPregunta.setLectura(valor);
                                    nuevaPregunta.setColumna("lectura", columna);
                                    break;
                                case "repeticion":
                                    nuevaPregunta.setRepeticion(valor);
                                    nuevaPregunta.setColumna("repeticion", columna);
                                    break;
                                case "apariencia":
                                    nuevaPregunta.setApariencia(valor);
                                    nuevaPregunta.setColumna("apariencia", columna);
                                    break;
                                case "codigo_pre":
                                    nuevaPregunta.setCodigo_pre(valor);
                                    nuevaPregunta.setColumna("codigo_pre", columna);
                                    break;
                                case "codigo_post":
                                    nuevaPregunta.setCodigo_post(valor);
                                    nuevaPregunta.setColumna("codigo_post", columna);
                                    break;
                                case "fichero":
                                    nuevaPregunta.setFichero(valor);
                                    nuevaPregunta.setColumna("fichero", columna);
                                    break;
                            }                            
                            /*Verificamos que estÃ©n las obligatorias.*/                             
                            colContador ++ ;
                            if(colContador>= listaEncabezadosPreguntas.size())
                            { 
                                colContador =0 ;
                            }                        
                        }
                    }                   
                    if(filaContador>0)
                    {
                        nuevaPregunta.setFila(filaContador);
                        listaPreguntas.add(nuevaPregunta);
                    }
                    ArrayList<Error> listaTemporal = nuevaPregunta.verificarErrores(fil);
                    listaTemporal.forEach((err) -> 
                    {
                        listaErrores.add(err);
                    });                     
                    filaContador = filaContador + 1;                
                }    
                
               
            }             
            /*Recorremos el array list*/               
            cadenaArchivo+= "<encuesta>\n";
            for(Pregunta preg: listaPreguntas)
            {
                cadenaArchivo+=preg.getData();
            }
            cadenaArchivo+= "</encuesta>\n";            
        }
        catch(Exception error)
        {
            if(error instanceof java.lang.NullPointerException)
            {
                //Mensaje(error.getMessage(), "Error");
                //encuestaFlag = false;
                //registrarError("Hoja Encuesta no encontrada", 0, 0,0, 0, "Sintactico"); 
            }
            
        }                                        
        return cadenaArchivo;
    }
    
    public String leerArchivoXOpcion(String path) throws FileNotFoundException, IOException
    {
        ArrayList<String> encabezados = new ArrayList();
        String cadenaArchivo= "";               
        try(FileInputStream archivo = new FileInputStream(new File(path)))
        {
            //Leer el archivo plano de excel.                        
            XSSFWorkbook libro = new XSSFWorkbook(archivo);                                                                      
            XSSFSheet hojaActual = libro.getSheet("opciones");                                    
            Iterator<Row> filaIterator = hojaActual.iterator();           
            Row fila; // Auxiliar para cada fila.
            int filaContador = 0;    // Contador de la fila                
            int colContador = 0;     // Contador de columna                        
            ArrayList<Opcion> listaOpciones = new ArrayList();            
            Opcion nuevaOpcion = null;                                                           
            while(filaIterator.hasNext())
            {
                fila = filaIterator.next();                
                //Ahora obtenemos las celdas de la fila.
                Iterator<Cell> celdaIterator = fila.cellIterator();
                Cell celda;
                //Obtenemos cada celda
                if(fila.getPhysicalNumberOfCells()>0)
                {
                    //if(filaContador>0){cadenaArchivo +=  "<fila>\n";}   
                    nuevaOpcion = new Opcion();
                    while(celdaIterator.hasNext())
                    {
                        //Obtenemos el contenido de la celda.
                        celda = celdaIterator.next();                   
                        if(filaContador == 0)
                        {
                            encabezados.add(celda.toString());
                        }
                        else                   
                        {
                            nuevaOpcion.insertarAtributo(encabezados.get(celda.getColumnIndex()), celda.toString());
                            colContador ++ ;
                            if(colContador>= encabezados.size()){ colContador =0 ;}                        
                        }
                    }                    
                    if(filaContador>0){listaOpciones.add(nuevaOpcion);}
                    filaContador ++;                
                }                
            }             
            /*Recorremos el array list*/               
            cadenaArchivo+= "<opciones>\n";
            for(Opcion opc: listaOpciones)
            {
                cadenaArchivo+=opc.getData();
            }
            cadenaArchivo+= "</opciones>\n";            
        }
        catch(Exception error)
        {
            Mensaje(error.getMessage(), "Error");
        }                                        
        return cadenaArchivo;
    }    
    
    public String leerArchivoXConfiguracion(String path) throws FileNotFoundException, IOException
    {
        ArrayList<String> encabezados = new ArrayList();
        String cadenaArchivo= "";     
        ArrayList<Configuracion> listaConfiguraciones = new ArrayList();            
        Configuracion nuevaConfiguracion = null;           
        try(FileInputStream archivo = new FileInputStream(new File(path)))
        {
            //Leer el archivo plano de excel.                        
            XSSFWorkbook libro = new XSSFWorkbook(archivo);                                                                      
            XSSFSheet hojaActual = libro.getSheet("configuracion");                                    
            Iterator<Row> filaIterator = hojaActual.iterator();           
            Row fila; // Auxiliar para cada fila.
            int filaContador = 0;    // Contador de la fila                
            int colContador = 0;     // Contador de columna                        
         
            
            while(filaIterator.hasNext())
            {
                fila = filaIterator.next();                
                //Ahora obtenemos las celdas de la fila.
                Iterator<Cell> celdaIterator = fila.cellIterator();
                Cell celda;
                //Obtenemos cada celda
                if(fila.getPhysicalNumberOfCells()>0)
                {
                    //if(filaContador>0){cadenaArchivo +=  "<fila>\n";}   
                    nuevaConfiguracion = new Configuracion();
                    while(celdaIterator.hasNext())
                    {
                        //Obtenemos el contenido de la celda.
                        celda = celdaIterator.next();                   
                        if(filaContador == 0)
                        {
                            encabezados.add(celda.toString());
                        }
                        else                   
                        {
                            nuevaConfiguracion.insertarAtributo(encabezados.get(celda.getColumnIndex()), celda.toString());
                            colContador ++ ;
                            if(colContador>= encabezados.size()){ colContador =0 ;}                        
                        }
                    }                    
                    if(filaContador>0){listaConfiguraciones.add(nuevaConfiguracion);}
                    filaContador ++;                
                }                
            }             
            /*Recorremos el array list*/               
            cadenaArchivo+= "<Configuraciones>\n";
            for(Configuracion conf: listaConfiguraciones)
            {
                cadenaArchivo+=conf.getData();
            }
            cadenaArchivo+= "</Configuraciones>\n";            
        }
        catch(Exception error)
        {
            //Mensaje(error.getMessage(), "Error");
            /*Recorremos el array list*/               
            cadenaArchivo+= "<Configuraciones>\n";
            for(Configuracion conf: listaConfiguraciones)
            {
                cadenaArchivo+=conf.getData();
            }
            cadenaArchivo+= "</Configuraciones>\n";             
            
        }                                        
        return cadenaArchivo;
    }       
    
    
    
    public String leerArchivoEncuesta(String path) throws FileNotFoundException, IOException
    {        
        String cadenaArchivo= "";               
        try(FileInputStream archivo = new FileInputStream(new File(path)))
        {
            //Leer el archivo plano de excel.                        
            HSSFWorkbook libro = new HSSFWorkbook(archivo);                                                                      
            HSSFSheet hojaActual = libro.getSheet("encuesta");             
            Iterator<Row> filaIterator = hojaActual.iterator();           
            Row fila; // Auxiliar para cada fila.
            int filaContador = 0;    // Contador de la fila                
            int colContador = 0;     // Contador de columna 
            int columna = 0;
            int fil = 0;
            Pregunta nuevaPregunta = null; 
            
            int totalFilas = hojaActual.getLastRowNum();
            int totalCeldas = 0;
            
            /*
            try
            {
                while(colContador<totalFilas)
                {
                    totalCeldas = hojaActual.getRow(colContador).getLastCellNum();                    
                    while(filaContador<totalCeldas)
                    {
                        if(hojaActual.getRow(colContador).getCell(filaContador)!=null)
                        {
                            System.out.print(hojaActual.getRow(colContador).getCell(filaContador).toString()+"  ");
                        }
                        
                        filaContador++;
                    }  
                    System.out.println("");
                    filaContador=0;
                    colContador++;
                }
            }catch(Exception e)
            {
                Mensaje(e.getMessage(),"error");
            }
            */
           
            
            while(filaIterator.hasNext())
            {                
                fila = filaIterator.next();
                //Mensaje("Mensaje",fila.getCell(0).toString());
                //Ahora obtenemos las celdas de la fila.
                Iterator<Cell> celdaIterator = fila.cellIterator();
                Cell celda;
                //Obtenemos cada celda
                if(fila.getPhysicalNumberOfCells()>0)
                {
                    //if(filaContador>0){cadenaArchivo +=  "<fila>\n";}   
                    nuevaPregunta = new Pregunta();
                    while(celdaIterator.hasNext())
                    {
                        //Obtenemos el contenido de la celda.
                        celda = celdaIterator.next();                   
                        if(filaContador == 0)
                        {     
                            registrarEncabezado(celda.toString(), celda.getColumnIndex());                            
                        }
                        else                   
                        {
                            //nuevaPregunta.insertarAtributo(encabezados.get(celda.getColumnIndex()), celda.toString());
                            String valor = celda.toString().trim();
                            
                            /*celda.getCellType()
                            celda.toString().trim();*/
                             
                            
                            switch (celda.getCellType()) 
                            {
                                case Cell.CELL_TYPE_NUMERIC:
                                    valor = String.valueOf(celda.getNumericCellValue());
                                    //System.out.println(celda.getNumericCellValue() + "(Integer)\t");
                                    break;
                                case Cell.CELL_TYPE_STRING:
                                    //System.out.println(celda.getStringCellValue() + "(String)\t");
                                    valor = String.valueOf(celda.getStringCellValue());
                                    break;
                                case Cell.CELL_TYPE_BOOLEAN:
                                    //System.out.println(celda.getBooleanCellValue()+ "(Booleano)\t");
                                    if(celda.getBooleanCellValue())
                                    {
                                        valor = "verdadero";
                                    }
                                    else
                                    {
                                        valor = "falso";
                                    }
                                    break;
                            }                                                                                                                
                                                        
                            
                            
                            columna = celda.getColumnIndex();
                            fil = celda.getRowIndex();
                            String encabezado = listaEncabezadosPreguntas.get(celda.getColumnIndex()).toLowerCase();
                            switch(encabezado)
                            {
                                case "tipo":
                                    nuevaPregunta.setTipo(valor);
                                    nuevaPregunta.setColumna("tipo", columna);
                                    break;
                                case "idpregunta":
                                    nuevaPregunta.setIdPregunta(valor);
                                    nuevaPregunta.setColumna("idpregunta", columna);
                                    break;               
                                case "etiqueta":                                    
                                    nuevaPregunta.setEtiqueta(valor);
                                    nuevaPregunta.setColumna("etiqueta", columna);
                                    break;
                                case "parametro":
                                    nuevaPregunta.setParametro(valor);
                                    nuevaPregunta.setColumna("parametro", columna);
                                    break;
                                case "calculo":
                                    nuevaPregunta.setCalculo(valor);
                                    nuevaPregunta.setColumna("calculo", columna);
                                    break;
                                case "aplicable":
                                    nuevaPregunta.setAplicable(valor);
                                    nuevaPregunta.setColumna("aplicable", columna);
                                    break;
                                case "sugerir":
                                    nuevaPregunta.setSugerir(valor);
                                    nuevaPregunta.setColumna("sugerir", columna);
                                    break;
                                case "restringir":
                                    nuevaPregunta.setRestringir(valor);
                                    nuevaPregunta.setColumna("restringir", columna);
                                    break;                
                                case "restringirmsn":
                                    nuevaPregunta.setRestringirmsn(valor);
                                    nuevaPregunta.setColumna("restringirmsn", columna);
                                    break;
                                case "requeridomsn":
                                    nuevaPregunta.setRequeridoMsn(valor);
                                    nuevaPregunta.setColumna("requeridomsn", columna);
                                    break;
                                case "requerido":
                                    nuevaPregunta.setRequerido(valor);
                                    nuevaPregunta.setColumna("requerido", columna);
                                    break;
                                case "predeterminado":
                                    nuevaPregunta.setPredeterminado(valor);
                                    nuevaPregunta.setColumna("predeterminado", columna);
                                    break;
                                case "lectura":
                                    nuevaPregunta.setLectura(valor);
                                    nuevaPregunta.setColumna("lectura", columna);
                                    break;
                                case "repeticion":
                                    nuevaPregunta.setRepeticion(valor);
                                    nuevaPregunta.setColumna("repeticion", columna);
                                    break;
                                case "apariencia":
                                    nuevaPregunta.setApariencia(valor);
                                    nuevaPregunta.setColumna("apariencia", columna);
                                    break;
                                case "codigo_pre":
                                    nuevaPregunta.setCodigo_pre(valor);
                                    nuevaPregunta.setColumna("codigo_pre", columna);
                                    break;
                                case "codigo_post":
                                    nuevaPregunta.setCodigo_post(valor);
                                    nuevaPregunta.setColumna("codigo_post", columna);
                                    break;
                                case "fichero":
                                    nuevaPregunta.setFichero(valor);
                                    nuevaPregunta.setColumna("fichero", columna);
                                    break;
                            }                            
                            /*Verificamos que estÃ©n las obligatorias.*/                             
                            colContador ++ ;
                            if(colContador>= listaEncabezadosPreguntas.size())
                            { 
                                colContador =0 ;
                            }                        
                        }
                    }                   
                    if(filaContador>0)
                    {
                        nuevaPregunta.setFila(filaContador);
                        listaPreguntas.add(nuevaPregunta);
                    }
                    ArrayList<Error> listaTemporal = nuevaPregunta.verificarErrores(fil);
                    listaTemporal.forEach((err) -> 
                    {
                        listaErrores.add(err);
                    });                     
                    filaContador = filaContador + 1;                
                }    
                
               
            }             
            /*Recorremos el array list*/               
            cadenaArchivo+= "<encuesta>\n";
            for(Pregunta preg: listaPreguntas)
            {
                cadenaArchivo+=preg.getData();
            }
            cadenaArchivo+= "</encuesta>\n";            
        }
        catch(Exception error)
        {
            Mensaje(error.getMessage(), "Error");
        }                                        
        return cadenaArchivo;
    }
    
    public String leerArchivoOpcion(String path) throws FileNotFoundException, IOException
    {
        ArrayList<String> encabezados = new ArrayList();
        String cadenaArchivo= "";               
        try(FileInputStream archivo = new FileInputStream(new File(path)))
        {
            //Leer el archivo plano de excel.                        
            HSSFWorkbook libro = new HSSFWorkbook(archivo);                                                                      
            HSSFSheet hojaActual = libro.getSheet("opciones");                                    
            Iterator<Row> filaIterator = hojaActual.iterator();           
            Row fila; // Auxiliar para cada fila.
            int filaContador = 0;    // Contador de la fila                
            int colContador = 0;     // Contador de columna                        
            ArrayList<Opcion> listaOpciones = new ArrayList();            
            Opcion nuevaOpcion = null;                                                           
            while(filaIterator.hasNext())
            {
                fila = filaIterator.next();                
                //Ahora obtenemos las celdas de la fila.
                Iterator<Cell> celdaIterator = fila.cellIterator();
                Cell celda;
                //Obtenemos cada celda
                if(fila.getPhysicalNumberOfCells()>0)
                {
                    //if(filaContador>0){cadenaArchivo +=  "<fila>\n";}   
                    nuevaOpcion = new Opcion();
                    while(celdaIterator.hasNext())
                    {
                        //Obtenemos el contenido de la celda.
                        celda = celdaIterator.next();                   
                        if(filaContador == 0)
                        {
                            encabezados.add(celda.toString());
                        }
                        else                   
                        {
                            nuevaOpcion.insertarAtributo(encabezados.get(celda.getColumnIndex()), celda.toString());
                            colContador ++ ;
                            if(colContador>= encabezados.size()){ colContador =0 ;}                        
                        }
                    }                    
                    if(filaContador>0){listaOpciones.add(nuevaOpcion);}
                    filaContador ++;                
                }                
            }             
            /*Recorremos el array list*/               
            cadenaArchivo+= "<opciones>\n";
            for(Opcion opc: listaOpciones)
            {
                cadenaArchivo+=opc.getData();
            }
            cadenaArchivo+= "</opciones>\n";            
        }
        catch(Exception error)
        {
            Mensaje(error.getMessage(), "Error");
        }                                        
        return cadenaArchivo;
    }    
    
    public String leerArchivoConfiguracion(String path) throws FileNotFoundException, IOException
    {
        ArrayList<String> encabezados = new ArrayList();
        String cadenaArchivo= "";     
        ArrayList<Configuracion> listaConfiguraciones = new ArrayList();            
        Configuracion nuevaConfiguracion = null;           
        try(FileInputStream archivo = new FileInputStream(new File(path)))
        {
            //Leer el archivo plano de excel.                        
            HSSFWorkbook libro = new HSSFWorkbook(archivo);                                                                      
            HSSFSheet hojaActual = libro.getSheet("configuracion");                                    
            Iterator<Row> filaIterator = hojaActual.iterator();           
            Row fila; // Auxiliar para cada fila.
            int filaContador = 0;    // Contador de la fila                
            int colContador = 0;     // Contador de columna                        
         
            
            while(filaIterator.hasNext())
            {
                fila = filaIterator.next();                
                //Ahora obtenemos las celdas de la fila.
                Iterator<Cell> celdaIterator = fila.cellIterator();
                Cell celda;
                //Obtenemos cada celda
                if(fila.getPhysicalNumberOfCells()>0)
                {
                    //if(filaContador>0){cadenaArchivo +=  "<fila>\n";}   
                    nuevaConfiguracion = new Configuracion();
                    while(celdaIterator.hasNext())
                    {
                        //Obtenemos el contenido de la celda.
                        celda = celdaIterator.next();                   
                        if(filaContador == 0)
                        {
                            encabezados.add(celda.toString());
                        }
                        else                   
                        {
                            nuevaConfiguracion.insertarAtributo(encabezados.get(celda.getColumnIndex()), celda.toString());
                            colContador ++ ;
                            if(colContador>= encabezados.size()){ colContador =0 ;}                        
                        }
                    }                    
                    if(filaContador>0){listaConfiguraciones.add(nuevaConfiguracion);}
                    filaContador ++;                
                }                
            }             
            /*Recorremos el array list*/               
            cadenaArchivo+= "<Configuraciones>\n";
            for(Configuracion conf: listaConfiguraciones)
            {
                cadenaArchivo+=conf.getData();
            }
            cadenaArchivo+= "</Configuraciones>\n";            
        }
        catch(Exception error)
        {
            //Mensaje(error.getMessage(), "Error");
            /*Recorremos el array list*/               
            cadenaArchivo+= "<Configuraciones>\n";
            for(Configuracion conf: listaConfiguraciones)
            {
                cadenaArchivo+=conf.getData();
            }
            cadenaArchivo+= "</Configuraciones>\n";             
            
        }                                        
        return cadenaArchivo;
    }                   
    public void Mensaje(String mensaje, String titulo)
    {
        JOptionPane.showMessageDialog(this, mensaje, titulo, HEIGHT);
    }    
    
    public String getArchivoActual()
    {
        return this.archivoActual;
    }
    public void setArchivoActual(String path)
    {
        this.archivoActual = path;
    }
    
    public void seleccionarArchivo() throws IOException    
    {
        JFileChooser file=new JFileChooser();
        file.showOpenDialog(this);
        /**abrimos el archivo seleccionado*/
        File eleccion=file.getSelectedFile();
        if(eleccion!=null)
        {
            setArchivoActual(eleccion.getPath());
            StringTokenizer token = new StringTokenizer(eleccion.getPath(),"\\");
            String formatoArchivo = "";
            while(token.hasMoreTokens())
            {
                formatoArchivo = token.nextToken();
            }
            token = new StringTokenizer(formatoArchivo,".");
            while(token.hasMoreElements()){formatoArchivo= token.nextToken();}
            
            if(formatoArchivo.equals("xlsx"))
            {
                areaEdicion.setText(leerArchivoXLSX(eleccion.getPath()));
            }
            else 
            {
                areaEdicion.setText(leerArchivoXLS(eleccion.getPath()));
            }                        
        }
    }
    
    public String leerArchivoXLSX(String path) throws IOException
    {
        limpiarListas();
        String cadena = "";        
        cadena+= leerArchivoXEncuesta(path);        
        cadena+= leerArchivoXOpcion(path);
        cadena+= leerArchivoXConfiguracion(path);
        generarArchivo(path, cadena);
        mostrarErrores();
        return cadena;        
    }
    
    public String leerArchivoXLS(String path) throws IOException
    {
        limpiarListas();
        String cadena = "";         
        cadena+= leerArchivoEncuesta(path);        
        cadena+= leerArchivoOpcion(path);
        cadena+= leerArchivoConfiguracion(path);
        generarArchivo(path, cadena);
        mostrarErrores();
        return cadena;        

    }    
    
     
    public void generarArchivo(String path, String contenido) throws IOException
    {        
        StringTokenizer token = new StringTokenizer(path,"\\");
        String formatoArchivo = "";
        while(token.hasMoreTokens())
        {
            formatoArchivo = token.nextToken();
        }        
        String cadenas[] = formatoArchivo.split("\\.");
        String ruta = "C:\\EXCEL\\"+cadenas[0] + ".ex";
        File archivo = new File(ruta);
        BufferedWriter bw;
        if(archivo.exists()) {
            bw = new BufferedWriter(new FileWriter(archivo));
            bw.write(contenido);
        } else {
            bw = new BufferedWriter(new FileWriter(archivo));
            bw.write(contenido);
        }
        bw.close();        
        

    }
    
    public void limpiarListas()
    {
        listaEncabezadosPreguntas.clear();
        listaErrores.clear();
        listaPreguntas.clear();
    }
    public void mostrarErrores()
    {                                      
        DefaultTableModel filasErrores = new DefaultTableModel();        
        filasErrores.addColumn("Archivo");        
        filasErrores.addColumn("LÃ­nea");
        filasErrores.addColumn("Columna");
        filasErrores.addColumn("Fila");
        filasErrores.addColumn("Celda");
        filasErrores.addColumn("Detalle"); 
        filasErrores.addColumn("Tipo");                 
        tablaErrores.setModel(filasErrores);
        comprobarCabeceras();
        
        /*Primero verificamos que los errores sean correctos.
        Por ejemplo que si son agrupaciÃ³n no se toman encuenta como errores si no trae idPregunta y etiqueta        
        */
        
        
        for(int x=0;x<listaErrores.size();x++)
        {
                filasErrores.addRow(new Object[]
                {
                    this.getArchivoActual(), 
                    listaErrores.get(x).getFila(),
                    listaErrores.get(x).getColumna(),
                    listaErrores.get(x).getRow(),
                    listaErrores.get(x).getColumn(),
                    listaErrores.get(x).getDetalle(),
                    listaErrores.get(x).getTipo()
                });                                            
        }                                             
    }  
    
    
    public void registrarError(String detalle, int fila, int columna)
    {        
        listaErrores.add(new Error(detalle, fila, columna));                
    }
    
    public void registrarError(String detalle, int fila, int columna, int row, int column, String type)
    {        
        listaErrores.add(new Error(detalle, fila, columna, row, column, type));                
    }    
       
    
    public boolean analizarCelda(String cadena)
    {
        boolean resultado  = false;                
        return resultado;
    }
    
    public void registrarEncabezado(String valor, int columna)
    {                
        if(
          valor.toLowerCase().equals("tipo") ||
          valor.toLowerCase().equals("idpregunta") ||                
          valor.toLowerCase().equals("etiqueta") ||                
          valor.toLowerCase().equals("parametro") ||                
          valor.toLowerCase().equals("calculo") ||                
          valor.toLowerCase().equals("aplicable") ||                
          valor.toLowerCase().equals("sugerir") ||                
          valor.toLowerCase().equals("restringir") ||      
          valor.toLowerCase().equals("restringirmsn") ||      
          valor.toLowerCase().equals("requeridomsn") ||      
          valor.toLowerCase().equals("requerido") ||      
          valor.toLowerCase().equals("predeterminado") ||   
          valor.toLowerCase().equals("lectura") ||      
          valor.toLowerCase().equals("repeticion") ||      
          valor.toLowerCase().equals("apariencia") ||      
          valor.toLowerCase().equals("codigo_pre") ||      
          valor.toLowerCase().equals("codigo_post") ||                      
          valor.toLowerCase().equals("fichero")                  
          )
        {
             listaEncabezadosPreguntas.add(valor); 
        }
        else
        {
           registrarError("Celda '"+valor+"' no vÃ¡lida.", 0, 0,1, columna, "Sintactico");   
           listaEncabezadosPreguntas.add(valor.toLowerCase());
        }    
    }
    
    
    public void analizar() throws IOException, Analizadores.Tipo.ParseException, Analizadores.Etiqueta.ParseException, ParseException, Analizadores.Parametro.ParseException
    {        
        //Inicializamos la raÃ­z del arbol general.
        raizArbol = new Nodo("XLS");
        dibujador printer = new dibujador();
        String[] argumentos = new String[3]; //Argumentos        
        int fila = 1;
        String[] encabezados = 
        {
            "tipo","idpregunta","etiqueta","parametro",/*"calculo","aplicable","sugerir","restringir",
            "restringirmsn","requerido","requeridomsn","predeterminado","lectura","repeticion","apariencia","codigo_pre",
            "codigo_post","fichero"*/
        };
        
        for(Pregunta pre : listaPreguntas)
        {
            Nodo arbolPregunta  = new Nodo("Pregunta");
            Nodo hijoAuxiliar = null; // En caso se ser un nuevo
            Nodo temporal = null;
            for(String parametro : encabezados)
            {
                if(!pre.getVacio()) // Verificamos que no mandemos una celda vacÃ­a.
                {
                    argumentos[0] =  pre.getAtributo(parametro);                                                                                  
                    
                    switch(parametro)
                    {
                        case "tipo":  
                            temporal = analizarTipo(argumentos,fila,fila,fila,pre.getColumna(parametro));
                            if(temporal!=null)
                            {
                                arbolPregunta.add(temporal);                                                        
                            }
                            break;
                        case "idpregunta":
                            //Mensaje(pre.getTipo(),"----");
                            if(!pre.esFinal() && !pre.esIniciar())
                            {
                                temporal = analizarId(argumentos,fila,fila,fila,pre.getColumna(parametro));
                            }                                                        
                            if(temporal!=null)
                            {
                                arbolPregunta.add(temporal);
                            }
                            break;
                        case "etiqueta":
                            if(!pre.esFinal() && !pre.esIniciar())
                            {
                                temporal = analizarEtiqueta(argumentos,fila,fila,fila,pre.getColumna(parametro));                                
                            }
                            if(temporal !=null)
                            {
                                arbolPregunta.add(temporal);
                            }
                            break;
                        case "parametro":
                            if(!pre.esFinal() && !pre.esIniciar())
                            {
                                temporal = analizarParametro(argumentos,fila,fila,fila,pre.getColumna(parametro));                                
                            }
                            if(temporal !=null)
                            {
                                arbolPregunta.add(temporal);
                            }
                            break;                            
                    }                    
                }
                temporal = null;
            }              
            if(arbolPregunta.tieneHijos())
            {
                raizArbol.add(arbolPregunta);
            }
            
            fila++;
        }        
        printer.grafo(raizArbol);
    }
    
    
    
    public Nodo analizarTipo(String[] argumentos, int fila, int columna, int filaE, int celda) throws Analizadores.Tipo.ParseException
    {        
        try
         {
             try
             {                                                  
                 return Analizadores.Tipo.parserTipo.main(argumentos);                                                        
             }
             catch(Analizadores.Tipo.TokenMgrError te)
             {   
                 //archivoActual, fila, fila
                 registrarError(te.getMessage(), fila, columna, filaE, celda, "Lexico");                                                 
             }
         }
         catch (Analizadores.Tipo.ParseException e)
         {
             registrarError(e.getMessage(), e.currentToken.beginLine, e.currentToken.beginColumn,fila, celda,"Sintactico");
         }        
        
        
        return null;
    }
    
    
    public Nodo analizarId(String[] argumentos, int fila, int columna, int filaE, int celda) throws Analizadores.idPregunta.ParseException
    {        
        try
         {
             try
             {                                                  
                 return Analizadores.idPregunta.idParser.main(argumentos);                                                        
             }
             catch(Analizadores.idPregunta.TokenMgrError te)
             {   
                 //archivoActual, fila, fila
                 registrarError(te.getMessage(), fila, columna, filaE, celda, "Lexico");                                                 
             }
         }
         catch (Analizadores.idPregunta.ParseException e)
         {
             registrarError(e.getMessage(), e.currentToken.beginLine, e.currentToken.beginColumn,fila, celda,"Sintactico");
         }        
        
        
        return null;
    }    
    
    public Nodo analizarEtiqueta(String[] argumentos, int fila, int columna, int filaE, int celda) throws Analizadores.Etiqueta.ParseException
    {        
        try
         {
             try
             {                                                  
                 return Analizadores.Etiqueta.parserEtiqueta.main(argumentos);                                                        
             }
             catch(Analizadores.Etiqueta.TokenMgrError te)
             {   
                 //archivoActual, fila, fila
                 registrarError(te.getMessage(), fila, columna, filaE, celda, "Lexico");                                                 
             }
         }
         catch (Analizadores.Etiqueta.ParseException e)
         {
             registrarError(e.getMessage(), e.currentToken.beginLine, e.currentToken.beginColumn,fila, celda,"Sintactico");
         }        
        
        
        return null;
    }    
    
    public Nodo analizarParametro(String[] argumentos, int fila, int columna, int filaE, int celda) throws Analizadores.Parametro.ParseException
    {        
        try
         {
             try
             {                                                  
                 return Analizadores.Parametro.parseParametro.main(argumentos);                                                        
             }
             catch(Analizadores.Parametro.TokenMgrError te)
             {   
                 //archivoActual, fila, fila
                 registrarError(te.getMessage(), fila, columna, filaE, celda, "Lexico");                                                 
             }
         }
         catch (Analizadores.Parametro.ParseException e)
         {
             registrarError(e.getMessage(), e.currentToken.beginLine, e.currentToken.beginColumn,fila, celda,"Sintactico");
         }        
        
        
        return null;
    }       
    
    /*Metodo para ver donde se va a nalizar la puta data.*/
    
    /*
    public Nodo analizarTipo(String[] argumentos)
    {
        try
        {
            try
            {                                                  
                excelParser.main(argumentos);                                                        
            }
            catch(TokenMgrError te)
            {   
                //archivoActual, fila, fila
                registrarError(te.getMessage(), fila, fila, fila, pre.getColumna("tipo"), "Lexico");                                                 
            }
        }
        catch (ParseException e)
        {
            registrarError(e.getMessage(), e.currentToken.beginLine, e.currentToken.beginColumn,fila, pre.getColumna("tipo"),"Sintactico");
        }        
    }
    */
    
    
    
    
    /*Este metodo sirve para comprobar que vengan las columnas obligatorias.*/
    public void comprobarCabeceras()
    {     
        if(encuestaFlag)
        {
            /*Primero verificamos la pagina Encuestas*/
            int flag = 0;
            for(String cab : listaEncabezadosPreguntas)
            {
              if(cab.toLowerCase().equals("tipo")){ flag += 1;}
              if(cab.toLowerCase().equals("idpregunta")){ flag += 1;}
              if(cab.toLowerCase().equals("etiqueta")){ flag += 1;}          
            }
            switch(flag)
            {
                case 0:
                    registrarError("Hace falta la columna Tipo", 0, 0);
                    registrarError("Hace falta la columna idPregunta", 0, 0);
                    registrarError("Hace falta la columna etiqueta", 0, 0);
                    break;
                case 1:                
                    registrarError("Hace falta la columna idPregunta", 0, 0);
                    registrarError("Hace falta la columna etiqueta", 0, 0);
                    break;  
                case 2:
                    registrarError("Hace falta la columna etiqueta", 0, 0);
                    break;                
            }            
        }


        /*Segundo verificamos la pagina Opciones*/
        /*Tercer verificamos la pagina configuraciones*/
    }
    
    public String getCelda(int valor)
    {
        int primera = valor / 28;
        int segunda = valor % 28;        
        if(primera!=0)
        {
            return Character.getName(primera+65) + Character.getName(segunda+65);            
        }
        else
        {
             return  Character.getName(segunda+65); 
        }                
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaEdicion;
    private javax.swing.JButton botonAbrir;
    private javax.swing.JButton botonErrores;
    private javax.swing.JButton botonGenerar;
    private javax.swing.JButton botonGuardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTable tablaErrores;
    // End of variables declaration//GEN-END:variables
}
