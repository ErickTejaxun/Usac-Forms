/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package generadorformularios;


import Analizadores.idPregunta.ParseException;
import AST.dibujador;
import AST.Nodo;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;



/**
 *
 * @author erick
 */
public class Interfaz extends javax.swing.JFrame {
    
    public ArrayList<Error> listaErrores = new ArrayList();
    private String archivoActual = "";    
    
    //Página encuenstas
    ArrayList<String> listaEncabezadosPreguntas = new ArrayList();
    public ArrayList<Pregunta> listaPreguntas = new ArrayList();
    
    //Página Opciones
    ArrayList<String> listaEncabezadosOpciones = new ArrayList();
    public ArrayList<Opcion> listaOpciones = new ArrayList();
    
    
    //Página Configuracion
    ArrayList<String> listaEncabezadosConfiguracion = new ArrayList();
    public ArrayList<Configuracion> listaConfiguraciones = new ArrayList();    
    
    //Arbol auxiliar de opciones.
    
    public ArrayList<Nodo> listaArbolOpciones = new ArrayList();
    Nodo raizArbolOpciones;


    //Arbol auxiliar de configuraciones
    
    public ArrayList<Nodo> listaArbolConfiguraciones = new ArrayList();
    Nodo raizArbolConfiguraciones;
    
    
    DefaultTableModel filasErrores;
    boolean encuestaFlag = true;    
    public Nodo raizArbolEncuesta;            
    /**
     * Creates new form Interfaz
     */
    public Interfaz()
    {
        initComponents();
        
        filasErrores = new DefaultTableModel();        
        filasErrores.addColumn("Archivo");
        filasErrores.addColumn("Línea");
        filasErrores.addColumn("Columna");
        filasErrores.addColumn("Fila");
        filasErrores.addColumn("Celda");
        filasErrores.addColumn("Detalle"); 
        filasErrores.addColumn("Tipo");                 
        tablaErrores.setModel(filasErrores);        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        botonGuardar = new javax.swing.JButton();
        botonAbrir = new javax.swing.JButton();
        botonErrores = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        botonGenerar = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaErrores = new javax.swing.JTable();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        areaEdicion = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1000, 800));
        setName("frameInterfaz"); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        botonGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/guardar.png"))); // NOI18N
        botonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarActionPerformed(evt);
            }
        });
        jPanel1.add(botonGuardar);
        botonGuardar.setBounds(85, 12, 40, 40);

        botonAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/abrir.jpg"))); // NOI18N
        botonAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAbrirActionPerformed(evt);
            }
        });
        jPanel1.add(botonAbrir);
        botonAbrir.setBounds(11, 12, 40, 40);

        botonErrores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/error.png"))); // NOI18N
        jPanel1.add(botonErrores);
        botonErrores.setBounds(154, 12, 40, 40);

        jLabel1.setText("Abrir");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(11, 63, 40, 20);

        jLabel2.setText("Guardar");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(85, 58, 60, 20);

        jLabel3.setText("Errores");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(151, 58, 60, 20);

        botonGenerar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/run.png"))); // NOI18N
        botonGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGenerarActionPerformed(evt);
            }
        });

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new javax.swing.OverlayLayout(jPanel3));

        tablaErrores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaErrores);

        jPanel3.add(jScrollPane1);

        jTabbedPane2.addTab("Errores", jPanel3);

        jPanel2.add(jTabbedPane2, java.awt.BorderLayout.CENTER);

        jPanel4.setLayout(new java.awt.BorderLayout());

        areaEdicion.setColumns(20);
        areaEdicion.setRows(5);
        jScrollPane3.setViewportView(areaEdicion);

        jPanel4.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jTabbedPane3.addTab("Entrada", jPanel4);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1104, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 262, Short.MAX_VALUE)
        );

        jTabbedPane3.addTab("Salida", jPanel5);

        jPanel2.add(jTabbedPane3, java.awt.BorderLayout.PAGE_START);

        jTabbedPane1.addTab("Entrada", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 690, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(115, 115, 115)
                .addComponent(botonGenerar, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(botonGenerar)))
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 666, Short.MAX_VALUE)
                .addGap(31, 31, 31))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGenerarActionPerformed
        
        try 
        {
            try 
            {
                analizarEncuesta();
                analizarOpciones();
                analizarConfiguraciones();
            } 
            catch (
                    Analizadores.Tipo.ParseException 
                    | Analizadores.Etiqueta.ParseException 
                    | Analizadores.idPregunta.ParseException  
                    | Analizadores.Parametro.ParseException
                    | Analizadores.Sugerir.ParseException 
                    | Analizadores.Codigo.ParseException
                    | Analizadores.Restringir.ParseException 
                    | Analizadores.Predeterminado.ParseException
                    | Analizadores.Requerido.ParseException
                    | Analizadores.Multimedia.ParseException
                    | Analizadores.Apariencia.ParseException
                    | Analizadores.Repeticion.ParseException 
                    | Analizadores.Opciones.ParseException
                    | Analizadores.Configuracion.ParseException                            
                ex) 
            {
                Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
            }                                                            
        } 
        catch (IOException ex) 
        {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
        mostrarErrores();                                       
    }//GEN-LAST:event_botonGenerarActionPerformed

    private void botonAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAbrirActionPerformed
        try 
        {
            seleccionarArchivo();
        } 
        catch (IOException ex) 
        {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonAbrirActionPerformed

    private void botonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarActionPerformed

        

    }//GEN-LAST:event_botonGuardarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    
    // Todos mis metodos engazados.
    
    //Metodo para leer el archivo .xls :v
    
    public String leerArchivoEncuesta(String path) throws FileNotFoundException, IOException
    {        
        String cadenaArchivo= "";               
        try(FileInputStream archivo = new FileInputStream(new File(path)))
        {
            //Leer el archivo plano de excel.                        
            HSSFWorkbook libro = new HSSFWorkbook(archivo);                                                                      
            HSSFSheet hojaActual = libro.getSheet("encuesta");             
            Iterator<Row> filaIterator = hojaActual.iterator();           
            Row fila; // Auxiliar para cada fila.
            int filaContador = 0;    // Contador de la fila                
            int colContador = 0;     // Contador de columna 
            int columna = 0;
            int fil = 0;
            Pregunta nuevaPregunta = null; 

            int totalFilas = hojaActual.getLastRowNum();
            int totalCeldas = 0;

            while(filaIterator.hasNext())
            {                
                fila = filaIterator.next();
                //Mensaje("Mensaje",fila.getCell(0).toString());
                //Ahora obtenemos las celdas de la fila.
                Iterator<Cell> celdaIterator = fila.cellIterator();
                Cell celda;
                //Obtenemos cada celda
                if(fila.getPhysicalNumberOfCells()>0)
                {
                    //if(filaContador>0){cadenaArchivo +=  "<fila>\n";}   
                    nuevaPregunta = new Pregunta();
                    while(celdaIterator.hasNext())
                    {
                        //Obtenemos el contenido de la celda.
                        celda = celdaIterator.next();                   
                        if(filaContador == 0)
                        {     
                            registrarEncabezadosEncuesta(celda.toString(), celda.getColumnIndex());                            
                        }
                        else                   
                        {
                            //nuevaPregunta.insertarAtributo(encabezados.get(celda.getColumnIndex()), celda.toString());
                            String valor = celda.toString().trim();

                            /*celda.getCellType()
                            celda.toString().trim();*/


                            switch (celda.getCellType()) 
                            {
                                case Cell.CELL_TYPE_NUMERIC:
                                    valor = String.valueOf(celda.getNumericCellValue());
                                    //System.out.println(celda.getNumericCellValue() + "(Integer)\t");
                                    break;
                                case Cell.CELL_TYPE_STRING:
                                    //System.out.println(celda.getStringCellValue() + "(String)\t");
                                    valor = String.valueOf(celda.getStringCellValue());
                                    break;
                                case Cell.CELL_TYPE_BOOLEAN:
                                    //System.out.println(celda.getBooleanCellValue()+ "(Booleano)\t");
                                    if(celda.getBooleanCellValue())
                                    {
                                        valor = "verdadero";
                                    }
                                    else
                                    {
                                        valor = "falso";
                                    }
                                    break;
                            }                                                                                                                
                            columna = celda.getColumnIndex();
                            fil = celda.getRowIndex();
                            String encabezado = listaEncabezadosPreguntas.get(celda.getColumnIndex()).toLowerCase();
                            switch(encabezado)
                            {
                                case "tipo":
                                    nuevaPregunta.setTipo(valor);
                                    //Pregunta.setColumna("tipo", columna);
                                    break;
                                case "idpregunta":
                                    nuevaPregunta.setIdPregunta(valor);
                                    //Pregunta.setColumna("idpregunta", columna);
                                    break;               
                                case "etiqueta":                                    
                                    nuevaPregunta.setEtiqueta(valor);
                                    //Pregunta.setColumna("etiqueta", columna);
                                    break;
                                case "parametro":
                                    nuevaPregunta.setParametro(valor);
                                    //nuevaPregunta.setColumna("parametro", columna);
                                    break;
                                case "calculo":
                                    nuevaPregunta.setCalculo(valor);
                                    //Pregunta.setColumna("calculo", columna);
                                    break;
                                case "aplicable":
                                    nuevaPregunta.setAplicable(valor);
                                    //Pregunta.setColumna("aplicable", columna);
                                    break;
                                case "sugerir":
                                    nuevaPregunta.setSugerir(valor);
                                    //Pregunta.setColumna("sugerir", columna);
                                    break;
                                case "restringir":
                                    nuevaPregunta.setRestringir(valor);
                                    //Pregunta.setColumna("restringir", columna);
                                    break;                
                                case "restringirmsn":
                                    nuevaPregunta.setRestringirmsn(valor);
                                    //Pregunta.setColumna("restringirmsn", columna);
                                    break;
                                case "requeridomsn":
                                    nuevaPregunta.setRequeridoMsn(valor);
                                    //Pregunta.setColumna("requeridomsn", columna);
                                    break;
                                case "requerido":
                                    nuevaPregunta.setRequerido(valor);
                                    //Pregunta.setColumna("requerido", columna);
                                    break;
                                case "predeterminado":
                                    nuevaPregunta.setPredeterminado(valor);
                                    //nuevaPregunta.setColumna("predeterminado", columna);
                                    break;
                                case "lectura":
                                    nuevaPregunta.setLectura(valor);
                                    //nuevaPregunta.setColumna("lectura", columna);
                                    break;
                                case "repeticion":
                                    nuevaPregunta.setRepeticion(valor);
                                    //nuevaPregunta.setColumna("repeticion", columna);
                                    break;
                                case "apariencia":
                                    nuevaPregunta.setApariencia(valor);
                                    //nuevaPregunta.setColumna("apariencia", columna);
                                    break;
                                case "codigo_pre":
                                    nuevaPregunta.setCodigo_pre(valor);
                                    //nuevaPregunta.setColumna("codigo_pre", columna);
                                    break;
                                case "codigo_post":
                                    nuevaPregunta.setCodigo_post(valor);
                                    //nuevaPregunta.setColumna("codigo_post", columna);
                                    break;
                                case "multimedia":
                                    nuevaPregunta.setMultimedia(valor);
                                    //nuevaPregunta.setColumna("fichero", columna);
                                    break;
                            }                            
                            /*Verificamos que estén las obligatorias.*/                             
                            colContador ++ ;
                            if(colContador>= listaEncabezadosPreguntas.size())
                            { 
                                colContador =0 ;
                            }                        
                        }
                    }                   
                    if(filaContador>0)
                    {
                        nuevaPregunta.setFila(filaContador);
                        listaPreguntas.add(nuevaPregunta);
                    }
                    ArrayList<Error> listaTemporal = nuevaPregunta.verificarErrores(fil);
                    listaTemporal.forEach((err) -> 
                    {
                        listaErrores.add(err);
                    });                     
                    filaContador = filaContador + 1;                
                }    
            }             
            /*Recorremos el array list*/               
            cadenaArchivo+= "<encuesta>\n";
            for(Pregunta preg: listaPreguntas)
            {
                cadenaArchivo+=preg.getData();
            }
            cadenaArchivo+= "</encuesta>\n";            
        }
        catch(Exception error)
        {
            Mensaje(error.getMessage(), "Error");
        }                                        
        return cadenaArchivo;
    }

    public String leerArchivoOpcion(String path) throws FileNotFoundException, IOException
    {        
        String cadenaArchivo= "";               
        try(FileInputStream archivo = new FileInputStream(new File(path)))
        {
            //Leer el archivo plano de excel.                        
            HSSFWorkbook libro = new HSSFWorkbook(archivo);                                                                      
            HSSFSheet hojaActual = libro.getSheet("opciones");             
            Iterator<Row> filaIterator = hojaActual.iterator();           
            Row fila; // Auxiliar para cada fila.
            int filaContador = 0;    // Contador de la fila                
            int colContador = 0;     // Contador de columna 
            int columna = 0;
            int fil = 0;
            Opcion nuevaOpcion = null; 

            int totalFilas = hojaActual.getLastRowNum();
            int totalCeldas = 0;

            while(filaIterator.hasNext())
            {                
                fila = filaIterator.next();
                //Mensaje("Mensaje",fila.getCell(0).toString());
                //Ahora obtenemos las celdas de la fila.
                Iterator<Cell> celdaIterator = fila.cellIterator();
                Cell celda;
                //Obtenemos cada celda
                if(fila.getPhysicalNumberOfCells()>0)
                {
                    //if(filaContador>0){cadenaArchivo +=  "<fila>\n";}   
                    nuevaOpcion = new Opcion();
                    while(celdaIterator.hasNext())
                    {
                        //Obtenemos el contenido de la celda.
                        celda = celdaIterator.next();                   
                        if(filaContador == 0)
                        {     
                            registrarEncabezadosOpciones(celda.toString(), celda.getColumnIndex());                            
                        }
                        else                   
                        {
                            //nuevaPregunta.insertarAtributo(encabezados.get(celda.getColumnIndex()), celda.toString());
                            String valor = celda.toString().trim();

                            /*celda.getCellType()
                            celda.toString().trim();*/


                            switch (celda.getCellType()) 
                            {
                                case Cell.CELL_TYPE_NUMERIC:
                                    valor = String.valueOf(celda.getNumericCellValue());
                                    //System.out.println(celda.getNumericCellValue() + "(Integer)\t");
                                    break;
                                case Cell.CELL_TYPE_STRING:
                                    //System.out.println(celda.getStringCellValue() + "(String)\t");
                                    valor = String.valueOf(celda.getStringCellValue());
                                    break;
                                case Cell.CELL_TYPE_BOOLEAN:
                                    //System.out.println(celda.getBooleanCellValue()+ "(Booleano)\t");
                                    if(celda.getBooleanCellValue())
                                    {
                                        valor = "verdadero";
                                    }
                                    else
                                    {
                                        valor = "falso";
                                    }
                                    break;
                            }                                                                                                                
                            columna = celda.getColumnIndex();
                            fil = celda.getRowIndex();
                            String encabezado = listaEncabezadosOpciones.get(celda.getColumnIndex()).toLowerCase();
                            switch(encabezado)
                            {
                                case "nombre_lista":
                                    nuevaOpcion.setNombre_lista(valor);
                                    //Pregunta.setColumna("tipo", columna);
                                    break;
                                case "nombre":
                                    nuevaOpcion.setNombre(valor);
                                    //Pregunta.setColumna("idpregunta", columna);
                                    break;               
                                case "etiqueta":                                    
                                    nuevaOpcion.setEtiqueta(valor);
                                    //Pregunta.setColumna("etiqueta", columna);
                                    break;
                                case "multimedia":
                                    nuevaOpcion.setMultimedia(valor);
                                    //nuevaPregunta.setColumna("fichero", columna);
                                    break;
                            }                            
                            /*Verificamos que estén las obligatorias.*/                             
                            colContador ++ ;
                            if(colContador>= listaEncabezadosOpciones.size())
                            { 
                                colContador =0 ;
                            }                        
                        }
                    }                   
                    if(filaContador>0)
                    {
                        nuevaOpcion.setFila(filaContador);
                        listaOpciones.add(nuevaOpcion);
                        ArrayList<Error> listaTemporal = nuevaOpcion.verificarErrores(fil);
                        listaTemporal.forEach((err) -> 
                        {
                            listaErrores.add(err);
                        });                            
                    }
                    filaContador = filaContador + 1;                
                }    
            }             
            /*Recorremos el array list*/               
            cadenaArchivo+= "<opciones>\n";
            for(Opcion opc: listaOpciones)
            {
                cadenaArchivo+=opc.getData();
            }
            cadenaArchivo+= "</opciones>\n";            
        }
        catch(Exception error)
        {
            Mensaje(error.getMessage()+ path + " Opciones", "Error");
        }                                        
        return cadenaArchivo;
    }

    
    public String leerArchivoConfiguracion(String path) throws FileNotFoundException, IOException
    {        
        String cadenaArchivo= "";               
        try(FileInputStream archivo = new FileInputStream(new File(path)))
        {
            //Leer el archivo plano de excel.                        
            HSSFWorkbook libro = new HSSFWorkbook(archivo);                                                                      
            HSSFSheet hojaActual = libro.getSheet("configuracion");             
            Iterator<Row> filaIterator = hojaActual.iterator();           
            Row fila; // Auxiliar para cada fila.
            int filaContador = 0;    // Contador de la fila                
            int colContador = 0;     // Contador de columna 
            int columna = 0;
            int fil = 0;
            Configuracion nuevaConfiguracion = null; 

            int totalFilas = hojaActual.getLastRowNum();
            int totalCeldas = 0;

            while(filaIterator.hasNext())
            {                
                fila = filaIterator.next();
                //Mensaje("Mensaje",fila.getCell(0).toString());
                //Ahora obtenemos las celdas de la fila.
                Iterator<Cell> celdaIterator = fila.cellIterator();
                Cell celda;
                //Obtenemos cada celda
                if(fila.getPhysicalNumberOfCells()>0)
                {
                    //if(filaContador>0){cadenaArchivo +=  "<fila>\n";}   
                    nuevaConfiguracion = new Configuracion();
                    while(celdaIterator.hasNext())
                    {
                        //Obtenemos el contenido de la celda.
                        celda = celdaIterator.next();                   
                        if(filaContador == 0)
                        {     
                            registrarEncabezadosConfiguracion(celda.toString(), celda.getColumnIndex());                            
                        }
                        else                   
                        {
                            //nuevaPregunta.insertarAtributo(encabezados.get(celda.getColumnIndex()), celda.toString());
                            String valor = celda.toString().trim();

                            /*celda.getCellType()
                            celda.toString().trim();*/


                            switch (celda.getCellType()) 
                            {
                                case Cell.CELL_TYPE_NUMERIC:
                                    valor = String.valueOf(celda.getNumericCellValue());
                                    //System.out.println(celda.getNumericCellValue() + "(Integer)\t");
                                    break;
                                case Cell.CELL_TYPE_STRING:
                                    //System.out.println(celda.getStringCellValue() + "(String)\t");
                                    valor = String.valueOf(celda.getStringCellValue());
                                    break;
                                case Cell.CELL_TYPE_BOOLEAN:
                                    //System.out.println(celda.getBooleanCellValue()+ "(Booleano)\t");
                                    if(celda.getBooleanCellValue())
                                    {
                                        valor = "verdadero";
                                    }
                                    else
                                    {
                                        valor = "falso";
                                    }
                                    break;
                            }                                                                                                                
                            columna = celda.getColumnIndex();
                            fil = celda.getRowIndex();
                            String encabezado = listaEncabezadosConfiguracion.get(celda.getColumnIndex()).toLowerCase();
                            switch(encabezado)
                            {
                                case "titulo_formulario":
                                    nuevaConfiguracion.setTitulo_formulario(valor);
                                    //Pregunta.setColumna("tipo", columna);
                                    break;
                                case "idform":
                                    nuevaConfiguracion.setIdform(valor);
                                    //Pregunta.setColumna("idpregunta", columna);
                                    break;               
                                case "estilo":                                    
                                    nuevaConfiguracion.setEstilo(valor);
                                    //Pregunta.setColumna("etiqueta", columna);
                                    break;
                                case "importar":
                                    nuevaConfiguracion.setImportar(valor);
                                    //nuevaPregunta.setColumna("fichero", columna);
                                    break;
                                case "codigo_principal":
                                    nuevaConfiguracion.setCodigo_principal(valor);
                                    //nuevaPregunta.setColumna("fichero", columna);
                                    break;
                                case "codigo_global":
                                    nuevaConfiguracion.setCodigo_global(valor);
                                    //nuevaPregunta.setColumna("fichero", columna);
                                    break;                                    
                            }                            
                            /*Verificamos que estén las obligatorias.*/                             
                            colContador ++ ;
                            if(colContador>= listaEncabezadosOpciones.size())
                            { 
                                colContador =0 ;
                            }                        
                        }
                    }                   
                    if(filaContador>0)
                    {
                        nuevaConfiguracion.setFila(filaContador);
                        listaConfiguraciones.add(nuevaConfiguracion);
                        /*ArrayList<Error> listaTemporal = nuevaConfiguracion.verificarErrores(fil);
                        listaTemporal.forEach((err) -> 
                        {
                            listaErrores.add(err);
                        });*/                            
                    }
                    filaContador = filaContador + 1;                
                }    
            }             
            /*Recorremos el array list*/               
            cadenaArchivo+= "<opciones>\n";
            for(Configuracion conf: listaConfiguraciones)
            {
                cadenaArchivo+=conf.getData();
            }
            cadenaArchivo+= "</opciones>\n";            
        }
        catch(Exception error)
        {
            Mensaje(error.getMessage()+ path + " Opciones", "Error");
        }                                        
        return cadenaArchivo;
    }    
    
    
    public String leerArchivoXEncuesta(String path) throws FileNotFoundException, IOException
    {        
        String cadenaArchivo= "";               
        try(FileInputStream archivo = new FileInputStream(new File(path)))
        {
            //Leer el archivo plano de excel.                        
            XSSFWorkbook libro = new XSSFWorkbook(archivo);                                                                      
            XSSFSheet hojaActual = libro.getSheet("encuesta");             
            Iterator<Row> filaIterator = hojaActual.iterator();           
            Row fila; // Auxiliar para cada fila.
            int filaContador = 0;    // Contador de la fila                
            int colContador = 0;     // Contador de columna 
            int columna = 0;
            int fil = 0;
            Pregunta nuevaPregunta = null; 

            int totalFilas = hojaActual.getLastRowNum();
            int totalCeldas = 0;

            while(filaIterator.hasNext())
            {                
                fila = filaIterator.next();
                //Mensaje("Mensaje",fila.getCell(0).toString());
                //Ahora obtenemos las celdas de la fila.
                Iterator<Cell> celdaIterator = fila.cellIterator();
                Cell celda;
                //Obtenemos cada celda
                if(fila.getPhysicalNumberOfCells()>0)
                {
                    //if(filaContador>0){cadenaArchivo +=  "<fila>\n";}   
                    nuevaPregunta = new Pregunta();
                    while(celdaIterator.hasNext())
                    {
                        //Obtenemos el contenido de la celda.
                        celda = celdaIterator.next();                   
                        if(filaContador == 0)
                        {     
                            registrarEncabezadosEncuesta(celda.toString(), celda.getColumnIndex());                            
                        }
                        else                   
                        {
                            //nuevaPregunta.insertarAtributo(encabezados.get(celda.getColumnIndex()), celda.toString());
                            String valor = celda.toString().trim();

                            /*celda.getCellType()
                            celda.toString().trim();*/


                            switch (celda.getCellType()) 
                            {
                                case Cell.CELL_TYPE_NUMERIC:
                                    valor = String.valueOf(celda.getNumericCellValue());
                                    //System.out.println(celda.getNumericCellValue() + "(Integer)\t");
                                    break;
                                case Cell.CELL_TYPE_STRING:
                                    //System.out.println(celda.getStringCellValue() + "(String)\t");
                                    valor = String.valueOf(celda.getStringCellValue());
                                    break;
                                case Cell.CELL_TYPE_BOOLEAN:
                                    //System.out.println(celda.getBooleanCellValue()+ "(Booleano)\t");
                                    if(celda.getBooleanCellValue())
                                    {
                                        valor = "verdadero";
                                    }
                                    else
                                    {
                                        valor = "falso";
                                    }
                                    break;
                            }                                                                                                                
                            columna = celda.getColumnIndex();
                            fil = celda.getRowIndex();
                            String encabezado = listaEncabezadosPreguntas.get(celda.getColumnIndex()).toLowerCase();
                            switch(encabezado)
                            {
                                case "tipo":
                                    nuevaPregunta.setTipo(valor);
                                    //Pregunta.setColumna("tipo", columna);
                                    break;
                                case "idpregunta":
                                    nuevaPregunta.setIdPregunta(valor);
                                    //Pregunta.setColumna("idpregunta", columna);
                                    break;               
                                case "etiqueta":                                    
                                    nuevaPregunta.setEtiqueta(valor);
                                    //Pregunta.setColumna("etiqueta", columna);
                                    break;
                                case "parametro":
                                    nuevaPregunta.setParametro(valor);
                                    //nuevaPregunta.setColumna("parametro", columna);
                                    break;
                                case "calculo":
                                    nuevaPregunta.setCalculo(valor);
                                    //Pregunta.setColumna("calculo", columna);
                                    break;
                                case "aplicable":
                                    nuevaPregunta.setAplicable(valor);
                                    //Pregunta.setColumna("aplicable", columna);
                                    break;
                                case "sugerir":
                                    nuevaPregunta.setSugerir(valor);
                                    //Pregunta.setColumna("sugerir", columna);
                                    break;
                                case "restringir":
                                    nuevaPregunta.setRestringir(valor);
                                    //Pregunta.setColumna("restringir", columna);
                                    break;                
                                case "restringirmsn":
                                    nuevaPregunta.setRestringirmsn(valor);
                                    //Pregunta.setColumna("restringirmsn", columna);
                                    break;
                                case "requeridomsn":
                                    nuevaPregunta.setRequeridoMsn(valor);
                                    //Pregunta.setColumna("requeridomsn", columna);
                                    break;
                                case "requerido":
                                    nuevaPregunta.setRequerido(valor);
                                    //Pregunta.setColumna("requerido", columna);
                                    break;
                                case "predeterminado":
                                    nuevaPregunta.setPredeterminado(valor);
                                    //nuevaPregunta.setColumna("predeterminado", columna);
                                    break;
                                case "lectura":
                                    nuevaPregunta.setLectura(valor);
                                    //nuevaPregunta.setColumna("lectura", columna);
                                    break;
                                case "repeticion":
                                    nuevaPregunta.setRepeticion(valor);
                                    //nuevaPregunta.setColumna("repeticion", columna);
                                    break;
                                case "apariencia":
                                    nuevaPregunta.setApariencia(valor);
                                    //nuevaPregunta.setColumna("apariencia", columna);
                                    break;
                                case "codigo_pre":
                                    nuevaPregunta.setCodigo_pre(valor);
                                    //nuevaPregunta.setColumna("codigo_pre", columna);
                                    break;
                                case "codigo_post":
                                    nuevaPregunta.setCodigo_post(valor);
                                    //nuevaPregunta.setColumna("codigo_post", columna);
                                    break;
                                case "multimedia":
                                    nuevaPregunta.setMultimedia(valor);
                                    //nuevaPregunta.setColumna("fichero", columna);
                                    break;
                            }                            
                            /*Verificamos que estén las obligatorias.*/                             
                            colContador ++ ;
                            if(colContador>= listaEncabezadosPreguntas.size())
                            { 
                                colContador =0 ;
                            }                        
                        }
                    }                   
                    if(filaContador>0)
                    {
                        nuevaPregunta.setFila(filaContador);
                        listaPreguntas.add(nuevaPregunta);
                    }
                    ArrayList<Error> listaTemporal = nuevaPregunta.verificarErrores(fil);
                    listaTemporal.forEach((err) -> 
                    {
                        listaErrores.add(err);
                    });                     
                    filaContador = filaContador + 1;                
                }    
            }             
            /*Recorremos el array list*/               
            cadenaArchivo+= "<encuesta>\n";
            for(Pregunta preg: listaPreguntas)
            {
                cadenaArchivo+=preg.getData();
            }
            cadenaArchivo+= "</encuesta>\n";            
        }
        catch(Exception error)
        {
            Mensaje(error.getMessage(), "Error");
        }                                        
        return cadenaArchivo;
    }

    public String leerArchivoXOpcion(String path) throws FileNotFoundException, IOException
    {        
        String cadenaArchivo= "";               
        try(FileInputStream archivo = new FileInputStream(new File(path)))
        {
            //Leer el archivo plano de excel.                        
            XSSFWorkbook libro = new XSSFWorkbook(archivo);                                                                      
            XSSFSheet hojaActual = libro.getSheet("opciones");             
            Iterator<Row> filaIterator = hojaActual.iterator();           
            Row fila; // Auxiliar para cada fila.
            int filaContador = 0;    // Contador de la fila                
            int colContador = 0;     // Contador de columna 
            int columna = 0;
            int fil = 0;
            Opcion nuevaOpcion = null; 

            int totalFilas = hojaActual.getLastRowNum();
            int totalCeldas = 0;

            while(filaIterator.hasNext())
            {                
                fila = filaIterator.next();
                //Mensaje("Mensaje",fila.getCell(0).toString());
                //Ahora obtenemos las celdas de la fila.
                Iterator<Cell> celdaIterator = fila.cellIterator();
                Cell celda;
                //Obtenemos cada celda
                if(fila.getPhysicalNumberOfCells()>0)
                {
                    //if(filaContador>0){cadenaArchivo +=  "<fila>\n";}   
                    nuevaOpcion = new Opcion();
                    while(celdaIterator.hasNext())
                    {
                        //Obtenemos el contenido de la celda.
                        celda = celdaIterator.next();                   
                        if(filaContador == 0)
                        {     
                            registrarEncabezadosOpciones(celda.toString(), celda.getColumnIndex());                            
                        }
                        else                   
                        {
                            //nuevaPregunta.insertarAtributo(encabezados.get(celda.getColumnIndex()), celda.toString());
                            String valor = celda.toString().trim();

                            /*celda.getCellType()
                            celda.toString().trim();*/


                            switch (celda.getCellType()) 
                            {
                                case Cell.CELL_TYPE_NUMERIC:
                                    valor = String.valueOf(celda.getNumericCellValue());
                                    //System.out.println(celda.getNumericCellValue() + "(Integer)\t");
                                    break;
                                case Cell.CELL_TYPE_STRING:
                                    //System.out.println(celda.getStringCellValue() + "(String)\t");
                                    valor = String.valueOf(celda.getStringCellValue());
                                    break;
                                case Cell.CELL_TYPE_BOOLEAN:
                                    //System.out.println(celda.getBooleanCellValue()+ "(Booleano)\t");
                                    if(celda.getBooleanCellValue())
                                    {
                                        valor = "verdadero";
                                    }
                                    else
                                    {
                                        valor = "falso";
                                    }
                                    break;
                            }                                                                                                                
                            columna = celda.getColumnIndex();
                            fil = celda.getRowIndex();
                            String encabezado = listaEncabezadosOpciones.get(celda.getColumnIndex()).toLowerCase();
                            switch(encabezado)
                            {
                                case "nombre_lista":
                                    nuevaOpcion.setNombre_lista(valor);
                                    //Pregunta.setColumna("tipo", columna);
                                    break;
                                case "nombre":
                                    nuevaOpcion.setNombre(valor);
                                    //Pregunta.setColumna("idpregunta", columna);
                                    break;               
                                case "etiqueta":                                    
                                    nuevaOpcion.setEtiqueta(valor);
                                    //Pregunta.setColumna("etiqueta", columna);
                                    break;
                                case "multimedia":
                                    nuevaOpcion.setMultimedia(valor);
                                    //nuevaPregunta.setColumna("fichero", columna);
                                    break;
                            }                            
                            /*Verificamos que estén las obligatorias.*/                             
                            colContador ++ ;
                            if(colContador>= listaEncabezadosOpciones.size())
                            { 
                                colContador =0 ;
                            }                        
                        }
                    }                   
                    if(filaContador>0)
                    {
                        nuevaOpcion.setFila(filaContador);
                        listaOpciones.add(nuevaOpcion);
                        ArrayList<Error> listaTemporal = nuevaOpcion.verificarErrores(fil);
                        listaTemporal.forEach((err) -> 
                        {
                            listaErrores.add(err);
                        });                            
                    }
                    filaContador = filaContador + 1;                
                }    
            }             
            /*Recorremos el array list*/               
            cadenaArchivo+= "<opciones>\n";
            for(Opcion opc: listaOpciones)
            {
                cadenaArchivo+=opc.getData();
            }
            cadenaArchivo+= "</opciones>\n";            
        }
        catch(Exception error)
        {
            Mensaje(error.getMessage()+ path + " Opciones", "Error");
        }                                        
        return cadenaArchivo;
    }

    
    public String leerArchivoXConfiguracion(String path) throws FileNotFoundException, IOException
    {        
        String cadenaArchivo= "";               
        try(FileInputStream archivo = new FileInputStream(new File(path)))
        {
            //Leer el archivo plano de excel.                        
            XSSFWorkbook libro = new XSSFWorkbook(archivo);                                                                      
            XSSFSheet hojaActual = libro.getSheet("configuracion");             
            Iterator<Row> filaIterator = hojaActual.iterator();           
            Row fila; // Auxiliar para cada fila.
            int filaContador = 0;    // Contador de la fila                
            int colContador = 0;     // Contador de columna 
            int columna = 0;
            int fil = 0;
            Configuracion nuevaConfiguracion = null; 

            int totalFilas = hojaActual.getLastRowNum();
            int totalCeldas = 0;

            while(filaIterator.hasNext())
            {                
                fila = filaIterator.next();
                //Mensaje("Mensaje",fila.getCell(0).toString());
                //Ahora obtenemos las celdas de la fila.
                Iterator<Cell> celdaIterator = fila.cellIterator();
                Cell celda;
                //Obtenemos cada celda
                if(fila.getPhysicalNumberOfCells()>0)
                {
                    //if(filaContador>0){cadenaArchivo +=  "<fila>\n";}   
                    nuevaConfiguracion = new Configuracion();
                    while(celdaIterator.hasNext())
                    {
                        //Obtenemos el contenido de la celda.
                        celda = celdaIterator.next();                   
                        if(filaContador == 0)
                        {     
                            registrarEncabezadosConfiguracion(celda.toString(), celda.getColumnIndex());                            
                        }
                        else                   
                        {
                            //nuevaPregunta.insertarAtributo(encabezados.get(celda.getColumnIndex()), celda.toString());
                            String valor = celda.toString().trim();

                            /*celda.getCellType()
                            celda.toString().trim();*/


                            switch (celda.getCellType()) 
                            {
                                case Cell.CELL_TYPE_NUMERIC:
                                    valor = String.valueOf(celda.getNumericCellValue());
                                    //System.out.println(celda.getNumericCellValue() + "(Integer)\t");
                                    break;
                                case Cell.CELL_TYPE_STRING:
                                    //System.out.println(celda.getStringCellValue() + "(String)\t");
                                    valor = String.valueOf(celda.getStringCellValue());
                                    break;
                                case Cell.CELL_TYPE_BOOLEAN:
                                    //System.out.println(celda.getBooleanCellValue()+ "(Booleano)\t");
                                    if(celda.getBooleanCellValue())
                                    {
                                        valor = "verdadero";
                                    }
                                    else
                                    {
                                        valor = "falso";
                                    }
                                    break;
                            }                                                                                                                
                            columna = celda.getColumnIndex();
                            fil = celda.getRowIndex();
                            String encabezado = listaEncabezadosConfiguracion.get(celda.getColumnIndex()).toLowerCase();
                            switch(encabezado)
                            {
                                case "titulo_formulario":
                                    nuevaConfiguracion.setTitulo_formulario(valor);
                                    //Pregunta.setColumna("tipo", columna);
                                    break;
                                case "idform":
                                    nuevaConfiguracion.setIdform(valor);
                                    //Pregunta.setColumna("idpregunta", columna);
                                    break;               
                                case "estilo":                                    
                                    nuevaConfiguracion.setEstilo(valor);
                                    //Pregunta.setColumna("etiqueta", columna);
                                    break;
                                case "importar":
                                    nuevaConfiguracion.setImportar(valor);
                                    //nuevaPregunta.setColumna("fichero", columna);
                                    break;
                                case "codigo_principal":
                                    nuevaConfiguracion.setCodigo_principal(valor);
                                    //nuevaPregunta.setColumna("fichero", columna);
                                    break;
                                case "codigo_global":
                                    nuevaConfiguracion.setCodigo_global(valor);
                                    //nuevaPregunta.setColumna("fichero", columna);
                                    break;                                    
                            }                            
                            /*Verificamos que estén las obligatorias.*/                             
                            colContador ++ ;
                            if(colContador>= listaEncabezadosOpciones.size())
                            { 
                                colContador =0 ;
                            }                        
                        }
                    }                   
                    if(filaContador>0)
                    {
                        nuevaConfiguracion.setFila(filaContador);
                        listaConfiguraciones.add(nuevaConfiguracion);
                        /*ArrayList<Error> listaTemporal = nuevaConfiguracion.verificarErrores(fil);
                        listaTemporal.forEach((err) -> 
                        {
                            listaErrores.add(err);
                        });*/                            
                    }
                    filaContador = filaContador + 1;                
                }    
            }             
            /*Recorremos el array list*/               
            cadenaArchivo+= "<opciones>\n";
            for(Configuracion conf: listaConfiguraciones)
            {
                cadenaArchivo+=conf.getData();
            }
            cadenaArchivo+= "</opciones>\n";            
        }
        catch(Exception error)
        {
            Mensaje(error.getMessage()+ path + " Opciones", "Error");
        }                                        
        return cadenaArchivo;
    }         
    
    
    
    public void Mensaje(String mensaje, String titulo)
    {
        JOptionPane.showMessageDialog(this, mensaje, titulo, HEIGHT);
    }    
    
    public String getArchivoActual()
    {
        return this.archivoActual;
    }
    public void setArchivoActual(String path)
    {
        this.archivoActual = path;
    }
    
    public void seleccionarArchivo() throws IOException    
    {
        JFileChooser file=new JFileChooser();
        file.showOpenDialog(this);
        /**abrimos el archivo seleccionado*/
        File eleccion=file.getSelectedFile();
        if(eleccion!=null)
        {
            setArchivoActual(eleccion.getPath());
            StringTokenizer token = new StringTokenizer(eleccion.getPath(),"\\");
            String formatoArchivo = "";
            while(token.hasMoreTokens())
            {
                formatoArchivo = token.nextToken();
            }
            token = new StringTokenizer(formatoArchivo,".");
            while(token.hasMoreElements()){formatoArchivo= token.nextToken();}
            
            if(formatoArchivo.equals("xlsx"))
            {
                areaEdicion.setText(leerArchivoXLSX(eleccion.getPath()));
            }
            else 
            {
                areaEdicion.setText(leerArchivoXLS(eleccion.getPath()));
            }                        
        }
    }
    
    public String leerArchivoXLSX(String path) throws IOException
    {
        limpiarListas();
        String cadena = "";        
        cadena+= leerArchivoXEncuesta(path);        
        cadena+= leerArchivoXOpcion(path);
        cadena+= leerArchivoXConfiguracion(path);
        generarArchivo(path, cadena);
        mostrarErrores();
        return cadena;        
    }
    
    public String leerArchivoXLS(String path) throws IOException
    {
        limpiarListas();
        String cadena = "";         
        cadena+= leerArchivoEncuesta(path);        
        cadena+= leerArchivoOpcion(path);
        cadena+= leerArchivoConfiguracion(path);
        generarArchivo(path, cadena);
        mostrarErrores();
        return cadena;        

    }    
    
     
    public void generarArchivo(String path, String contenido) throws IOException
    {        
        StringTokenizer token = new StringTokenizer(path,"\\");
        String formatoArchivo = "";
        while(token.hasMoreTokens())
        {
            formatoArchivo = token.nextToken();
        }        
        String cadenas[] = formatoArchivo.split("\\.");
        String ruta = "C:\\EXCEL\\"+cadenas[0] + ".ex";
        File archivo = new File(ruta);
        BufferedWriter bw;
        if(archivo.exists()) {
            bw = new BufferedWriter(new FileWriter(archivo));
            bw.write(contenido);
        } else {
            bw = new BufferedWriter(new FileWriter(archivo));
            bw.write(contenido);
        }
        bw.close();        
        

    }
    
    public void limpiarListas()
    {
        listaEncabezadosPreguntas.clear();
        listaErrores.clear();
        listaPreguntas.clear();
    }
    public void mostrarErrores()
    {                                      
        DefaultTableModel filasErrores = new DefaultTableModel();        
        filasErrores.addColumn("Archivo");        
        filasErrores.addColumn("Línea");
        filasErrores.addColumn("Columna");
        filasErrores.addColumn("Fila");
        filasErrores.addColumn("Celda");
        filasErrores.addColumn("Detalle"); 
        filasErrores.addColumn("Tipo");                 
        tablaErrores.setModel(filasErrores);
        comprobarCabeceras();
        
        /*Primero verificamos que los errores sean correctos.
        Por ejemplo que si son agrupación no se toman encuenta como errores si no trae idPregunta y etiqueta        
        */
        
        
        for(int x=0;x<listaErrores.size();x++)
        {
                filasErrores.addRow(new Object[]
                {
                    this.getArchivoActual(), 
                    listaErrores.get(x).getFila() ,
                    listaErrores.get(x).getColumna(),
                    listaErrores.get(x).getRow()+ 1,
                    listaErrores.get(x).getColumn(),
                    listaErrores.get(x).getDetalle(),
                    listaErrores.get(x).getTipo()
                });                                            
        }                                             
    }  
    
    
    public void registrarError(String detalle, int fila, int columna)
    {        
        listaErrores.add(new Error(detalle, fila, columna));                
    }
    
    public void registrarError(String detalle, int fila, int columna, int row, int column, String type)
    {        
        listaErrores.add(new Error(detalle, fila, columna, row, column, type));                
    }    
       
    
    public boolean analizarCelda(String cadena)
    {
        boolean resultado  = false;                
        return resultado;
    }
    
    public void registrarEncabezadosEncuesta(String valor, int columna)
    {        
        valor = valor.trim();
        if(
          valor.toLowerCase().equals("tipo") ||
          valor.toLowerCase().equals("idpregunta") ||                
          valor.toLowerCase().equals("etiqueta") ||                
          valor.toLowerCase().equals("parametro") ||                
          valor.toLowerCase().equals("calculo") ||                
          valor.toLowerCase().equals("aplicable") ||                
          valor.toLowerCase().equals("sugerir") ||                
          valor.toLowerCase().equals("restringir") ||      
          valor.toLowerCase().equals("restringirmsn") ||      
          valor.toLowerCase().equals("requeridomsn") ||      
          valor.toLowerCase().equals("requerido") ||      
          valor.toLowerCase().equals("predeterminado") ||   
          valor.toLowerCase().equals("lectura") ||      
          valor.toLowerCase().equals("repeticion") ||      
          valor.toLowerCase().equals("apariencia") ||      
          valor.toLowerCase().equals("codigo_pre") ||      
          valor.toLowerCase().equals("codigo_post") ||                      
          valor.toLowerCase().equals("multimedia")                  
          )
        {
             listaEncabezadosPreguntas.add(valor); 
             Pregunta.setColumna(valor.toLowerCase(), columna );
        }
        else
        {
           registrarError("Celda '"+valor+"' no válida.", 0, 0,1, columna, "Sintactico");   
           listaEncabezadosPreguntas.add(valor.toLowerCase());
        }    
    }
    
    
    public void registrarEncabezadosOpciones(String valor, int columna)
    {        
        valor = valor.trim();
        if(
          valor.toLowerCase().equals("nombre_lista") ||
          valor.toLowerCase().equals("nombre") ||                
          valor.toLowerCase().equals("etiqueta") ||                                   
          valor.toLowerCase().equals("multimedia")                  
          )
        {
             listaEncabezadosOpciones.add(valor.toLowerCase()); 
             Opcion.setColumna(valor.toLowerCase(), columna );
        }
        else
        {
           registrarError("Celda '"+valor+"' no válida.", 0, 0,1, columna, "Sintactico");   
           listaEncabezadosOpciones.add(valor.toLowerCase());
        }    
    }    
    
    public void registrarEncabezadosConfiguracion(String valor, int columna)
    {        
        valor = valor.trim();
        if(
          valor.toLowerCase().equals("titulo_formulario") ||
          valor.toLowerCase().equals("idform") ||                
          valor.toLowerCase().equals("estilo") ||                                   
          valor.toLowerCase().equals("codigo_principal") ||                                   
          valor.toLowerCase().equals("codigo_global") ||                                                   
          valor.toLowerCase().equals("importar")                  
          )
        {
             listaEncabezadosConfiguracion.add(valor.toLowerCase()); 
             Configuracion.setColumna(valor.toLowerCase(), columna );
        }
        else
        {
           registrarError("Celda '"+valor+"' no válida.", 0, 0,1, columna, "Sintactico");   
           listaEncabezadosConfiguracion.add(valor.toLowerCase());
        }    
    }       
    
    
    public void analizarEncuesta() 
            throws IOException,
            Analizadores.Tipo.ParseException, 
            Analizadores.Etiqueta.ParseException, 
            ParseException, 
            Analizadores.Parametro.ParseException, 
            Analizadores.Sugerir.ParseException,
            Analizadores.Codigo.ParseException,
            Analizadores.Restringir.ParseException,
            Analizadores.Requerido.ParseException,
            Analizadores.Predeterminado.ParseException,
            Analizadores.Repeticion.ParseException,
            Analizadores.Multimedia.ParseException,
            Analizadores.Apariencia.ParseException
    {        
        //Inicializamos la raíz del arbol general.
        raizArbolEncuesta = new Nodo("XLS");
        dibujador printer = new dibujador();
        String[] argumentos = new String[3]; //Argumentos        
        int fila = 1;
        /*String[] encabezados = 
        {
            "tipo","idpregunta","etiqueta","parametro","sugerir","calculo","aplicable","sugerir","restringir",
            "restringirmsn","requerido","requeridomsn","predeterminado","lectura","repeticion","apariencia","codigo_pre",
            "codigo_post","fichero"
        };*/
        
        
        String[] encabezados = listaEncabezadosPreguntas.toArray(new String[0]);        
        
        for(Pregunta pre : listaPreguntas)
        {
            Nodo arbolPregunta  = new Nodo("Pregunta");
            Nodo hijoAuxiliar = null; // En caso se ser un nuevo
            Nodo temporal = null;
            for(String parametro : encabezados)
            {
                if(!pre.getVacio()) // Verificamos que no mandemos una celda vacía.
                {
                    argumentos[0] =  pre.getAtributo(parametro);                                                                                  
                    
                    switch(parametro.toLowerCase())
                    {
                        case "tipo":  
                            temporal = analizarTipo(argumentos,fila,fila,fila,Pregunta.getColumna(parametro));
                            if(temporal!=null)
                            {
                                arbolPregunta.add(temporal);                                                        
                            }
                            break;
                        case "idpregunta":
                            //Mensaje(pre.getTipo(),"----");
                            if(!pre.esFinal() && !pre.esIniciar())
                            {
                                temporal = analizarId(argumentos,fila,fila,fila,Pregunta.getColumna(parametro));
                            }                                                        
                            if(temporal!=null)
                            {
                                arbolPregunta.add(temporal);
                            }
                            break;
                        case "etiqueta":
                            if(!pre.esFinal() && !pre.esIniciar())
                            {
                                temporal = analizarEtiqueta(argumentos,fila,fila,fila,Pregunta.getColumna(parametro));                                
                            }
                            if(temporal !=null)
                            {
                                arbolPregunta.add(temporal);
                            }
                            break;
                        case "parametro":
                            if(!pre.esFinal() && !pre.esIniciar())
                            {
                                if(!pre.getParametro().equals(""))
                                {                                
                                    temporal = analizarParametro(argumentos,fila,fila,fila,Pregunta.getColumna(parametro));                                
                                }
                            }
                            if(temporal !=null)
                            {
                                arbolPregunta.add(temporal);
                            }
                            break;     
                        case "sugerir":
                            if(!pre.esFinal() && !pre.esIniciar())
                            {
                                if(!pre.getSugerir().equals(""))
                                {                                
                                    temporal = analizarSugerir(argumentos,fila,fila,fila,Pregunta.getColumna(parametro));                                
                                }
                            }
                            if(temporal !=null)
                            {
                                arbolPregunta.add(temporal);
                            }
                            break;  
                        case "codigo_pre":
                            if(!pre.esFinal() && !pre.esIniciar())
                            {
                                if(!pre.getCodigo_pre().equals(""))
                                {                                
                                    temporal = analizarCodigo(argumentos,fila,fila,fila,Pregunta.getColumna(parametro));  
                                    if(temporal!=null)
                                    {
                                        temporal.setTipo("codigo_pre");
                                        temporal.setValue("codigo_pre");                                       
                                    }                                                                       
                                }
                            }
                            if(temporal !=null)
                            {
                                arbolPregunta.add(temporal);
                            }
                            break;      
                        case "codigo_post":
                            if(!pre.esFinal() && !pre.esIniciar())
                            {
                                if(!pre.getCodigo_post().equals(""))
                                {                                
                                    temporal = analizarCodigo(argumentos,fila,fila,fila,Pregunta.getColumna(parametro));  
                                    if(temporal!=null)
                                    {
                                        temporal.setTipo("codigo_post");
                                        temporal.setValue("codigo_post");                                       
                                    }                                     
                                     
                                }
                            }
                            if(temporal !=null)
                            {                               
                                arbolPregunta.add(temporal);
                            }
                            break;          
                        case "restringir":
                            if(!pre.esFinal() && !pre.esIniciar())
                            {
                                if(!pre.getRestringir().equals(""))
                                {                                
                                    temporal = analizarRestringir(argumentos,fila,fila,fila,Pregunta.getColumna(parametro));                                         
                                }
                            }
                            if(temporal !=null)
                            {                               
                                arbolPregunta.add(temporal);
                            }
                            break;       
                        case "calculo":
                            if(!pre.esFinal() && !pre.esIniciar())
                            {
                                if(!pre.getCalculo().equals(""))
                                {                                
                                    temporal = analizarRestringir(argumentos,fila,fila,fila,Pregunta.getColumna(parametro));   
                                    if(temporal!=null)
                                    {
                                        temporal.setValue("calculo");
                                        temporal.setTipo("calculo");                                        
                                    }                                    
                                }
                            }
                            if(temporal !=null)
                            {                               
                                arbolPregunta.add(temporal);
                            }
                            break; 
                        case "aplicable":
                            if(!pre.esFinal() && !pre.esIniciar())
                            {
                                if(!pre.getAplicable().equals(""))
                                {                                
                                    temporal = analizarRestringir(argumentos,fila,fila,fila,Pregunta.getColumna(parametro));   
                                    if(temporal!=null)
                                    {
                                        temporal.setValue("aplicable");
                                        temporal.setTipo("aplicable");                                        
                                    }
                                }
                            }
                            if(temporal !=null)
                            {                               
                                arbolPregunta.add(temporal);
                            }
                            break; 
                        case "restringirmsn":
                            if(!pre.esFinal() && !pre.esIniciar())
                            {
                                if(!pre.getRestringirmsn().equals(""))
                                {                                
                                    temporal = analizarEtiqueta(argumentos,fila,fila,fila,Pregunta.getColumna(parametro));   
                                    if(temporal!=null)
                                    {
                                        temporal.setValue("restringirmsn");
                                        temporal.setTipo("restringirmsn");                                        
                                    }                                                                           
                                }
                            }
                            if(temporal !=null)
                            {                               
                                arbolPregunta.add(temporal);
                            }
                            break;     
                        case "requerirmsn":
                            if(!pre.esFinal() && !pre.esIniciar())
                            {
                                if(!pre.getRequeridoMsn().equals(""))
                                {                                
                                    temporal = analizarEtiqueta(argumentos,fila,fila,fila,Pregunta.getColumna(parametro));   
                                    if(temporal!=null)
                                    {
                                        temporal.setValue("requerirmsn");
                                        temporal.setTipo("requerirmsn");                                        
                                    }                                    
                                }
                            }
                            if(temporal !=null)
                            {                               
                                arbolPregunta.add(temporal);
                            }
                            break;     
                        case "requerido":
                            if(!pre.esFinal() && !pre.esIniciar())
                            {
                                if(!pre.getRequerido().equals(""))
                                {                                
                                    temporal = analizarRequerido(argumentos,fila,fila,fila,Pregunta.getColumna(parametro));  
                                    if(temporal!=null)
                                    {
                                        temporal.setValue("requerido");
                                        temporal.setTipo("requerido");                                        
                                    }                                    
                                }
                            }
                            if(temporal !=null)
                            {                               
                                arbolPregunta.add(temporal);
                            }
                            break;  
                        case "lectura":
                            if(!pre.esFinal() && !pre.esIniciar())
                            {
                                if(!pre.getLectura().equals(""))
                                {                                
                                    temporal = analizarRequerido(argumentos,fila,fila,fila,Pregunta.getColumna(parametro));   
                                    if(temporal!=null)
                                    {
                                        temporal.setValue("lectura");
                                        temporal.setTipo("lectura");                                        
                                    }                                     
                                }
                            }
                            if(temporal !=null)
                            {                               
                                arbolPregunta.add(temporal);
                            }
                            break;                             
                        case "predeterminado":
                            if(!pre.esFinal() && !pre.esIniciar())
                            {
                                if(!pre.getPredeterminado().equals(""))
                                {                                
                                    temporal = analizarPredeterminado(argumentos,fila,fila,fila,Pregunta.getColumna(parametro));   
                                }
                            }
                            if(temporal !=null)
                            {                               
                                arbolPregunta.add(temporal);
                            }
                            break; 
                        case "repeticion":
                            if(!pre.esFinal() && !pre.esIniciar())
                            {
                                if(!pre.getRepeticion().equals(""))
                                {                                
                                    temporal = analizarRepeticion(argumentos,fila,fila,fila,Pregunta.getColumna(parametro));   
                                }
                            }
                            if(temporal !=null)
                            {                               
                                arbolPregunta.add(temporal);
                            }
                            break;        
                        case "multimedia":
                            if(!pre.esFinal() && !pre.esIniciar())
                            {
                                if(!pre.getMultimedia().equals(""))
                                {                                
                                    temporal = analizarMultimedia(argumentos,fila,fila,fila,Pregunta.getColumna(parametro));   
                                }
                            }
                            if(temporal !=null)
                            {                               
                                arbolPregunta.add(temporal);
                            }
                            break;  
                        case "apariencia":
                            if(!pre.esFinal() && !pre.esIniciar())
                            {
                                if(!pre.getApariencia().equals(""))
                                {                                
                                    temporal = analizarApariencia(argumentos,fila,fila,fila,Pregunta.getColumna(parametro));   
                                }
                            }
                            if(temporal !=null)
                            {                               
                                arbolPregunta.add(temporal);
                            }
                            break;                              
                           
                    }                    
                }
                temporal = null;
            }              
            if(arbolPregunta.tieneHijos())
            {
                raizArbolEncuesta.add(arbolPregunta);
            }
            
            fila++;
        }        
        printer.grafo(raizArbolEncuesta, "encuesta");
    }
    
    
    
    public void analizarOpciones() 
            throws IOException, 
            Analizadores.Opciones.ParseException, 
            Analizadores.Etiqueta.ParseException, 
            Analizadores.Multimedia.ParseException
    {        
        //Inicializamos la raíz del arbol general.
        //listaArbolOpciones.add(null);
        raizArbolOpciones = new Nodo("Opciones");
        dibujador printer = new dibujador();
        String[] argumentos = new String[3]; //Argumentos        
        int fila = 1;
        /*String[] encabezados = 
        {
            "tipo","idpregunta","etiqueta","parametro","sugerir","calculo","aplicable","sugerir","restringir",
            "restringirmsn","requerido","requeridomsn","predeterminado","lectura","repeticion","apariencia","codigo_pre",
            "codigo_post","fichero"
        };*/
        
        
        String[] encabezados = listaEncabezadosOpciones.toArray(new String[0]);        
        
        for(Opcion opc : listaOpciones)
        {
            Nodo arbolOpciones  = new Nodo("Opcion");
            Nodo nuevaLista = new Nodo("lista");    
            Nodo nuevaOpcion = new Nodo("opcion");
            
            Nodo temporal = null;
            for(String parametro : encabezados)
            {
                if(!opc.getVacio()) // Verificamos que no mandemos una celda vacía.
                {
                    argumentos[0] =  opc.getAtributo(parametro);                                                                                  
                    
                    switch(parametro.toLowerCase())
                    {
                        case "nombre_lista":  
                            temporal = analizarOpciones(argumentos,fila,fila,fila,Opcion.getColumna(parametro));
                            if(temporal!=null)
                            {
                                nuevaLista.setValue(temporal.getValue());
                                nuevaLista.setColumna(temporal.getColumna());
                                nuevaLista.setLinea(temporal.getLinea());
                            }
                            break;
                        case "nombre":  
                            temporal = analizarOpciones(argumentos,fila,fila,fila,Opcion.getColumna(parametro));
                            if(temporal!=null)
                            {
                                nuevaOpcion.setValue(temporal.getValue());
                                //nuevaOpcion.add(temporal);                                                        
                            }
                            break;
                        case "etiqueta":
                            temporal = analizarEtiqueta(argumentos,fila,fila,fila,Opcion.getColumna(parametro));
                            if(temporal!=null)
                            {
                                nuevaOpcion.add(temporal);                                                        
                            }                            
                            break;    
                        case "multimedia":
                            if(!opc.getMultimedia().equals(""))
                            {
                                temporal = analizarMultimedia(argumentos,fila,fila,fila,Opcion.getColumna(parametro));                                
                            }
                            if(temporal!=null)
                            {
                                nuevaOpcion.add(temporal);                                                        
                            }                             
                            break;                           
                    }                    
                }                
                temporal = null;
            }
            nuevaLista.add(nuevaOpcion);
            agregarArbolOpciones(nuevaLista);           
            fila++;
        }        
        printer.grafo(raizArbolOpciones, "opciones");
    }
        
    
    
    public void analizarConfiguraciones() 
            throws IOException, 
            Analizadores.Configuracion.ParseException
    {        
        //Inicializamos la raíz del arbol general.
        //listaArbolOpciones.add(null);
        raizArbolConfiguraciones = new Nodo("Configuraciones");
        dibujador printer = new dibujador();
        String[] argumentos = new String[3]; //Argumentos        
        int fila = 1;              
        String[] encabezados = listaEncabezadosConfiguracion.toArray(new String[0]);        
        
        for(Configuracion conf : listaConfiguraciones)
        {
            Nodo arbolOpciones  = new Nodo("Configuraciones");              
            Nodo nuevaConfiguracion = new Nodo("opcion");
            
            Nodo temporal = null;
            for(String parametro : encabezados)
            {
                if(!conf.getVacio()) // Verificamos que no mandemos una celda vacía.
                {
                    argumentos[0] =  parametro+"\n"+conf.getAtributo(parametro);                                                                                  
                    
                    switch(parametro.toLowerCase())
                    {                       
                        case "titulo_formulario":  
                            if(!conf.getTitulo_formulario().equals(""))
                            {
                                temporal = analizarConfiguracion(argumentos,fila,fila,fila,Configuracion.getColumna(parametro));
                            }                            
                            if(temporal!=null)
                            {   
                                nuevaConfiguracion.add(temporal);
                            }
                            break;
                        case "idform":  
                            if(!conf.getIdform().equals(""))
                            {
                                temporal = analizarConfiguracion(argumentos,fila,fila,fila,Configuracion.getColumna(parametro));
                            }  
                            if(temporal!=null)
                            {
                                nuevaConfiguracion.add(temporal);
                            }
                            break;
                        case "importar":
                            if(!conf.getImportar().equals(""))
                            {
                                temporal = analizarConfiguracion(argumentos,fila,fila,fila,Configuracion.getColumna(parametro));
                            } 
                            if(temporal!=null)
                            {
                                nuevaConfiguracion.add(temporal);                                                        
                            }                            
                            break;    
                        case "codigo_global":
                            if(!conf.getCodigo_global().equals(""))
                            {
                                temporal = analizarConfiguracion(argumentos,fila,fila,fila,Configuracion.getColumna(parametro));
                            } 
                            if(temporal!=null)
                            {
                                nuevaConfiguracion.add(temporal);                                                        
                            }                           
                            break;  
                        case "codigo_principal":
                            if(!conf.getCodigo_principal().equals(""))
                            {
                                temporal = analizarConfiguracion(argumentos,fila,fila,fila,Configuracion.getColumna(parametro));
                            } 
                            if(temporal!=null)
                            {
                                nuevaConfiguracion.add(temporal);                                                        
                            }                            
                            break;  
                        case "estilo":
                            if(!conf.getEstilo().equals(""))
                            {
                                temporal = analizarConfiguracion(argumentos,fila,fila,fila,Configuracion.getColumna(parametro));
                            } 
                            if(temporal!=null)
                            {
                                nuevaConfiguracion.add(temporal);                                                        
                            }                            
                            break;                            
                    }                    
                }                
                temporal = null;
            }            
            agregarArbolConfiguraciones(nuevaConfiguracion);           
            fila++;
        }        
        printer.grafo(raizArbolConfiguraciones, "configuraciones");
    }
            
    public void agregarArbolOpciones(Nodo nuevaLista)
    {
        boolean flagEncontrado = false;
        for(Nodo lista : raizArbolOpciones.getHijos())
        {
            if(lista.getValue().equals(nuevaLista.getValue()))
            {
                lista.add(nuevaLista.getHijos().get(0));                
                flagEncontrado = true;
            }            
        }
        if(!flagEncontrado)
        {
            raizArbolOpciones.add(nuevaLista);
        }
        
    }
    
    
    
    public void agregarArbolConfiguraciones(Nodo nuevaLista)
    {
        raizArbolConfiguraciones.add(nuevaLista);
//        boolean flagEncontrado = false;
//        for(Nodo lista : raizArbolConfiguraciones.getHijos())
//        {
//            if(lista.getValue().equals(nuevaLista.getValue()))
//            {
//                lista.add(nuevaLista.getHijos().get(0));                
//                flagEncontrado = true;
//            }            
//        }
//        if(!flagEncontrado)
//        {
//            raizArbolConfiguraciones.add(nuevaLista);
//        }
        
    }    
    
    public Nodo analizarTipo(String[] argumentos, int fila, int columna, int filaE, int celda) throws Analizadores.Tipo.ParseException
    {        
        try
         {
             try
             {                                                  
                 return Analizadores.Tipo.parserTipo.main(argumentos);                                                        
             }
             catch(Analizadores.Tipo.TokenMgrError te)
             {   
                 //archivoActual, fila, fila
                 registrarError(te.getMessage(), fila, columna, filaE, celda, "Lexico");                                                 
             }
         }
         catch (Analizadores.Tipo.ParseException e)
         {
             registrarError(e.getMessage(), e.currentToken.beginLine, e.currentToken.beginColumn,fila, celda,"Sintactico");
         }        
        
        
        return null;
    }
    
    
    public Nodo analizarId(String[] argumentos, int fila, int columna, int filaE, int celda) throws Analizadores.idPregunta.ParseException
    {        
        try
         {
             try
             {                                                  
                 return Analizadores.idPregunta.idParser.main(argumentos);                                                        
             }
             catch(Analizadores.idPregunta.TokenMgrError te)
             {   
                 //archivoActual, fila, fila
                 registrarError(te.getMessage(), fila, columna, filaE, celda, "Lexico");                                                 
             }
         }
         catch (Analizadores.idPregunta.ParseException e)
         {
             registrarError(e.getMessage(), e.currentToken.beginLine, e.currentToken.beginColumn,fila, celda,"Sintactico");
         }        
        
        
        return null;
    }  
    
    public Nodo analizarOpciones(String[] argumentos, int fila, int columna, int filaE, int celda) throws Analizadores.Opciones.ParseException
    {        
        try
         {
             try
             {                                                  
                 return Analizadores.Opciones.parserOpciones.main(argumentos);                                                        
             }
             catch(Analizadores.Opciones.TokenMgrError te)
             {   
                 //archivoActual, fila, fila
                 registrarError(te.getMessage(), fila, columna, filaE, celda, "Lexico");                                                 
             }
         }
         catch (Analizadores.Opciones.ParseException e)
         {
             registrarError(e.getMessage(), e.currentToken.beginLine, e.currentToken.beginColumn,fila, celda,"Sintactico");
         }        
        
        
        return null;
    }     
    
    public Nodo analizarEtiqueta(String[] argumentos, int fila, int columna, int filaE, int celda) throws Analizadores.Etiqueta.ParseException
    {        
        try
         {
             try
             {                                                  
                 return Analizadores.Etiqueta.parserEtiqueta.main(argumentos);                                                        
             }
             catch(Analizadores.Etiqueta.TokenMgrError te)
             {   
                 //archivoActual, fila, fila
                 registrarError(te.getMessage(), fila, columna, filaE, celda, "Lexico");                                                 
             }
         }
         catch (Analizadores.Etiqueta.ParseException e)
         {
             registrarError(e.getMessage(), e.currentToken.beginLine, e.currentToken.beginColumn,fila, celda,"Sintactico");
         }        
        
        
        return null;
    }    
    
    public Nodo analizarRequerido(String[] argumentos, int fila, int columna, int filaE, int celda) throws Analizadores.Requerido.ParseException
    {        
        try
         {
             try
             {                                                  
                 return Analizadores.Requerido.parserRequerido.main(argumentos);                                                        
             }
             catch(Analizadores.Etiqueta.TokenMgrError te)
             {   
                 //archivoActual, fila, fila
                 registrarError(te.getMessage(), fila, columna, filaE, celda, "Lexico");                                                 
             }
         }
         catch (Analizadores.Requerido.ParseException e)
         {
             registrarError(e.getMessage(), e.currentToken.beginLine, e.currentToken.beginColumn,fila, celda,"Sintactico");
         }        
        
        
        return null;
    }        
    public Nodo analizarPredeterminado(String[] argumentos, int fila, int columna, int filaE, int celda) throws Analizadores.Predeterminado.ParseException
    {        
        try
         {
             try
             {                                                  
                 return Analizadores.Predeterminado.parserPredeterminado.main(argumentos);                                                        
             }
             catch(Analizadores.Etiqueta.TokenMgrError te)
             {   
                 //archivoActual, fila, fila
                 registrarError(te.getMessage(), fila, columna, filaE, celda, "Lexico");                                                 
             }
         }
         catch (Analizadores.Predeterminado.ParseException e)
         {
             registrarError(e.getMessage(), e.currentToken.beginLine, e.currentToken.beginColumn,fila, celda,"Sintactico");
         }        
        
        
        return null;
    }    
    
    
    
    public Nodo analizarParametro(String[] argumentos, int fila, int columna, int filaE, int celda) throws Analizadores.Parametro.ParseException
    {        
        try
         {
             try
             {                                                  
                 return Analizadores.Parametro.parseParametro.main(argumentos);                                                        
             }
             catch(Analizadores.Parametro.TokenMgrError te)
             {   
                 //archivoActual, fila, fila
                 registrarError(te.getMessage(), fila, columna, filaE, celda, "Lexico");                                                 
             }
         }
         catch (Analizadores.Parametro.ParseException e)
         {
             registrarError(e.getMessage(), e.currentToken.beginLine, e.currentToken.beginColumn,fila, celda,"Sintactico");
         }        
        
        
        return null;
    }  
    
    public Nodo analizarRepeticion(String[] argumentos, int fila, int columna, int filaE, int celda) throws Analizadores.Repeticion.ParseException
    {        
        try
         {
             try
             {                                                  
                 return Analizadores.Repeticion.parserRepeticion.main(argumentos);                                                        
             }
             catch(Analizadores.Repeticion.TokenMgrError te)
             {   
                 //archivoActual, fila, fila
                 registrarError(te.getMessage(), fila, columna, filaE, celda, "Lexico");                                                 
             }
         }
         catch (Analizadores.Repeticion.ParseException e)
         {
             registrarError(e.getMessage(), e.currentToken.beginLine, e.currentToken.beginColumn,fila, celda,"Sintactico");
         }        
        
        
        return null;
    }  

    
    public Nodo analizarApariencia(String[] argumentos, int fila, int columna, int filaE, int celda) throws Analizadores.Apariencia.ParseException
    {        
        try
         {
             try
             {                                                  
                 return Analizadores.Apariencia.parserApariencia.main(argumentos);                                                        
             }
             catch(Analizadores.Apariencia.TokenMgrError te)
             {   
                 //archivoActual, fila, fila
                 registrarError(te.getMessage(), fila, columna, filaE, celda, "Lexico");                                                 
             }
         }
         catch (Analizadores.Apariencia.ParseException e)
         {
             registrarError(e.getMessage(), e.currentToken.beginLine, e.currentToken.beginColumn,fila, celda,"Sintactico");
         }        
        
        
        return null;
    }     
        
    

    public Nodo analizarMultimedia(String[] argumentos, int fila, int columna, int filaE, int celda) throws Analizadores.Multimedia.ParseException
    {        
        try
         {
             try
             {                                                  
                 return Analizadores.Multimedia.parserMultimedia.main(argumentos);                                                        
             }
             catch(Analizadores.Multimedia.TokenMgrError te)
             {   
                 //archivoActual, fila, fila
                 registrarError(te.getMessage(), fila, columna, filaE, celda, "Lexico");                                                 
             }
         }
         catch (Analizadores.Multimedia.ParseException e)
         {
             registrarError(e.getMessage(), e.currentToken.beginLine, e.currentToken.beginColumn,fila, celda,"Sintactico");
         }        
        
        
        return null;
    }     
    
    public Nodo analizarConfiguracion(String[] argumentos, int fila, int columna, int filaE, int celda) throws Analizadores.Configuracion.ParseException
    {        
        try
         {
             try
             {                                                  
                 return Analizadores.Configuracion.parserConfiguracion.main(argumentos);                                                        
             }
             catch(Analizadores.Configuracion.TokenMgrError te)
             {   
                 //archivoActual, fila, fila
                 registrarError(te.getMessage(), fila, columna, filaE, celda, "Lexico");                                                 
             }
         }
         catch (Analizadores.Configuracion.ParseException e)
         {
             registrarError(e.getMessage(), e.currentToken.beginLine, e.currentToken.beginColumn,fila, celda,"Sintactico");
         }        
        
        
        return null;
    }        
    
    public Nodo analizarSugerir(String[] argumentos, int fila, int columna, int filaE, int celda) throws Analizadores.Sugerir.ParseException
    {        
        try
         {
             try
             {                                                  
                 return Analizadores.Sugerir.parserSugerir.main(argumentos);                                                        
             }
             catch(Analizadores.Sugerir.TokenMgrError te)
             {   
                 //archivoActual, fila, fila
                 registrarError(te.getMessage(), fila, columna, filaE, celda, "Lexico");                                                 
             }
         }
         catch (Analizadores.Sugerir.ParseException e)
         {
             registrarError(e.getMessage(), e.currentToken.beginLine, e.currentToken.beginColumn,fila, celda,"Sintactico");
         }        
        
        
        return null;
    }      
    
    
    
    public Nodo analizarCodigo(String[] argumentos, int fila, int columna, int filaE, int celda) throws Analizadores.Codigo.ParseException
    {        
        try
         {
             try
             {                                                  
                 return Analizadores.Codigo.parserCodigo.main(argumentos);                                                        
             }
             catch(Analizadores.Codigo.TokenMgrError te)
             {   
                 //archivoActual, fila, fila
                 registrarError(te.getMessage(), fila, columna, filaE, celda, "Lexico");                                                 
             }
         }
         catch (Analizadores.Codigo.ParseException e)
         {
             registrarError(e.getMessage(), e.currentToken.beginLine, e.currentToken.beginColumn,fila, celda,"Sintactico");
         }        
        
        
        return null;
    }    
    
    
    public Nodo analizarRestringir(String[] argumentos, int fila, int columna, int filaE, int celda) throws Analizadores.Restringir.ParseException
    {        
        try
         {
             try
             {                                                  
                 return Analizadores.Restringir.parserRestringir.main(argumentos);                                                        
             }
             catch(Analizadores.Restringir.TokenMgrError te)
             {   
                 //archivoActual, fila, fila
                 registrarError(te.getMessage(), fila, columna, filaE, celda, "Lexico");                                                 
             }
         }
         catch (Analizadores.Restringir.ParseException e)
         {
             registrarError(e.getMessage(), e.currentToken.beginLine, e.currentToken.beginColumn,fila, celda,"Sintactico");
         }        
        
        
        return null;
    }     
    /*Metodo para ver donde se va a nalizar la puta data.*/
    
    /*
    public Nodo analizarTipo(String[] argumentos)
    {
        try
        {
            try
            {                                                  
                excelParser.main(argumentos);                                                        
            }
            catch(TokenMgrError te)
            {   
                //archivoActual, fila, fila
                registrarError(te.getMessage(), fila, fila, fila, pre.getColumna("tipo"), "Lexico");                                                 
            }
        }
        catch (ParseException e)
        {
            registrarError(e.getMessage(), e.currentToken.beginLine, e.currentToken.beginColumn,fila, pre.getColumna("tipo"),"Sintactico");
        }        
    }
    */
    
    
    
    
    /*Este metodo sirve para comprobar que vengan las columnas obligatorias.*/
    public void comprobarCabeceras()
    {     
        if(encuestaFlag)
        {
            /*Primero verificamos la pagina Encuestas*/
            int flag = 0;
            for(String cab : listaEncabezadosPreguntas)
            {
              if(cab.toLowerCase().equals("tipo")){ flag += 1;}
              if(cab.toLowerCase().equals("idpregunta")){ flag += 1;}
              if(cab.toLowerCase().equals("etiqueta")){ flag += 1;}          
            }
            switch(flag)
            {
                case 0:
                    registrarError("Hace falta la columna Tipo", 0, 0);
                    registrarError("Hace falta la columna idPregunta", 0, 0);
                    registrarError("Hace falta la columna etiqueta", 0, 0);
                    break;
                case 1:                
                    registrarError("Hace falta la columna idPregunta", 0, 0);
                    registrarError("Hace falta la columna etiqueta", 0, 0);
                    break;  
                case 2:
                    registrarError("Hace falta la columna etiqueta", 0, 0);
                    break;                
            }            
        }


        /*Segundo verificamos la pagina Opciones*/
        /*Tercer verificamos la pagina configuraciones*/
    }
    
    public String getCelda(int valor)
    {
        valor ++;
        int primera = valor / 28;
        int segunda = valor % 28;        
        if(primera!=0)
        {
            return Character.getName(primera+65) + Character.getName(segunda+65);            
        }
        else
        {
             return  Character.getName(segunda+65); 
        }                
    }
    
    
    public Nodo ordenarArbol(Nodo raiz)
    {
        if(raiz.getTipo().equals("iniciar "))
        {
            
        }    
        
        
        return null;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaEdicion;
    private javax.swing.JButton botonAbrir;
    private javax.swing.JButton botonErrores;
    private javax.swing.JButton botonGenerar;
    private javax.swing.JButton botonGuardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTable tablaErrores;
    // End of variables declaration//GEN-END:variables
}
