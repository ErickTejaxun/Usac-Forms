
/*
 * Copyright © 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */


options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = true;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(parserEtiqueta)

package Analizadores.Etiqueta;
import AST.Nodo;
import java.io.ByteArrayInputStream;
import java.io.InputStream;

public class parserEtiqueta 
{    
    public String cadenaAuxiliar="";
    public static Nodo main(String args[]) throws ParseException
    {
        if(args.length>0)
        {

            InputStream data = new ByteArrayInputStream(args[0].getBytes());
            parserEtiqueta analizador = new parserEtiqueta(data);
            return analizador.Etiqueta();   
        }
        else
        {
            try
            {
                parserEtiqueta analizador = new parserEtiqueta(System.in);
                analizador.Etiqueta();
            }
            catch (ParseException e)
            {
                System.out.println(e.getMessage());
                System.out.println("Errores------------------");
            }              
        }
        return null;
    }

    void errorPanico(int tokenSinc) 
    { 
        ParseException e = generateParseException();     
        Token t; 
        do 
        {
            t = getNextToken();
        } 
        while (t.kind != tokenSinc);
    }

    public void imprimir(String mensaje)
    {
        System.out.println(mensaje);
    }   

}
PARSER_END(parserEtiqueta)


/*
<ESTADO> -- ESTADO es el nombre del estado en el que vamos a declarar las reglas léxicas.
SKIP: ignora el no terminal
MORE: encicla en una producción 
TOKEN: tokens
TOKEN_ESPCIAL: saber
*/


SKIP:
{
" "
| "\r"
| "\t"
}


TOKEN :
{

<numeral : "#">
|<corchA : "[" >
|<corchC : "]" >
|<punto: ".">
|<doblepunto: "..">
|<Cualquiera : (~["#",".", "[", "]"])+ >
|<ID: (["a"-"z","A"-"Z"]("_")?)(["a"-"z","A"-"Z"]|["0"- "9"]|"_")*>
}


Nodo Etiqueta() :
{
    String Cad;
    Nodo nuevo;
    Token t= null;

}
{
  (Cad = ETQ() {
        imprimir("Cad->"+Cad);
        nuevo = new Nodo(Cad,0,0);
        return nuevo;
        })+ <EOF>
}


String ETQ() :
{String Cad;
String aux;}
{
Cad = T() aux = ETQ2() {Cad = Cad + aux;  return Cad;}
}


String ETQ2() :
{String Cad;
String aux;}
{
 Cad = T() aux = ETQ2() {Cad = Cad + aux;  return Cad;}
| <EOF> {return "";}
}

String T() :
{Token t;
String aux;}
{
  t=<Cualquiera> {imprimir("Cual->"+t.image);return t.image + " ";}
| t=<numeral> aux = ET3() { imprimir("#->"+t.image);return aux + " ";}
| t=<punto> { imprimir(".->"+t.image);return "padre ";}
| t=<doblepunto> { imprimir("..->"+t.image);return "madre";}
}

String ET3():
{
    String cad;
    String auxiliar;
    Token t= null;
}

{
    <corchA> t=<Cualquiera> <corchC>{ imprimir("Var->"+t.image);return t.image +" ";}
    |t=<Cualquiera> { imprimir("Color->"+t.image);return t.image +" ";}
}