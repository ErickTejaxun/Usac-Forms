
/*
 * Copyright Â© 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */


options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = true;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(parserConfiguracion)

package Analizadores.Configuracion;
import AST.Nodo;
import java.io.ByteArrayInputStream;
import java.io.InputStream;

public class parserConfiguracion 
{    
    public String cadenaAuxiliar="";
    public static Nodo main(String args[]) throws ParseException
    {
        if(args.length>0)
        {

            InputStream data = new ByteArrayInputStream(args[0].getBytes());
            parserConfiguracion analizador = new parserConfiguracion(data);
            return analizador.Inicio();   
        }
        else
        {
            try
            {
                parserConfiguracion analizador = new parserConfiguracion(System.in);
                analizador.Inicio();
            }
            catch (ParseException e)
            {
                System.out.println(e.getMessage());
                System.out.println("Errores------------------");
            }              
        }
        return null;
    }

    void errorPanico(int tokenSinc) 
    { 
        ParseException e = generateParseException();     
        Token t; 
        do 
        {
            t = getNextToken();
        } 
        while (t.kind != tokenSinc);
    }

}
PARSER_END(parserConfiguracion)


<DEFAULT,ID>SPECIAL_TOKEN:
{
    <ESPACIO:(" " | "\t" | "\n" | "\r" )+>
}


TOKEN :
{
<titulo_formulario:"titulo_formulario">
|<idform:"idform">:ID
|<estilo:"estilo">
|<importar:"importar">
|<codigo_principal:"codigo_principal">:CODE
|<codigo_global:"codigo_global">:CODE
|<pagina:"pagina">
|<archivo:<id>"."<id>>
|<todo:"todo">
|<cuadricula:"cuadricula">

}
<DEFAULT,ID>TOKEN:
{
    <id: (["a"-"z","A"-"Z"]("_")?)(["a"-"z","A"-"Z"]|["0"- "9"]|"_")*>
}

<CODE>TOKEN:
{
    <codigo:(~[])+>
}

Nodo Inicio():
{
    Nodo nuevo = new Nodo("nodo","",0,0);
    Token t1 = null;
    Token t2 = null;
}
{
    t1=<titulo_formulario>(t2=<id>
        {
            if(nuevo.getValue().equals(""))
            {
                nuevo = new Nodo(t1.image,t2.image,t2.beginColumn, t2.beginLine -1 -1);
            }
            else
            {
                nuevo.setValue(nuevo.getValue()+" "+t2.image);
            }
        }
        )+ <EOF>
    {
        return nuevo;
    }
    |t1=<importar><importar>(t2=<archivo><EOF>
        {
            if(nuevo.getValue().equals(""))
            {
                nuevo = new Nodo(t1.image,t2.image,t2.beginColumn, t2.beginLine -1 -1);
            }
            else
            {
                nuevo.setValue(nuevo.getValue()+" "+t2.image);
            }
        }
        )+ <EOF>
    {
        return nuevo;
    }

    |t1=<idform>t2=<id><EOF>
    {
        nuevo = new Nodo(t1.image, t2.image, t2.beginColumn, t2.beginLine -1 );
        return nuevo;
    }
    |t1=<estilo>(t2=<todo>|t2=<pagina>|t2=<cuadricula>) <EOF>
    {
        nuevo = new Nodo(t1.image, t2.image, t2.beginColumn, t2.beginLine -1 );
        return nuevo;
    }
    |(t1=<codigo_principal>|t1=<codigo_global>)(t2=<codigo>)<EOF>
    {
        nuevo = new Nodo(t1.image, t2.image, t2.beginColumn, t2.beginLine -1 );
        return nuevo;
    }
}

