
/*
 * Copyright © 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */


options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = true;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(excelParser)

package Analizadores;
import java.io.ByteArrayInputStream;
import java.io.InputStream;

public class excelParser 
{

    public static void main(String args[]) throws ParseException
    {
        if(args.length>0)
        {

            InputStream data = new ByteArrayInputStream(args[0].getBytes());
            excelParser analizador = new excelParser(data);
            analizador.Inicio();
/*
            try
            {
                try
                {

                }
                catch(TokenMgrError te)
                {   
                    System.out.println(te.getMessage());
                    System.out.println("Errores------------------");                    
                }
            }
            catch (ParseException e)
            {
                System.out.println(e.getMessage());
                System.out.println("Errores------------------");
            } 
*/           
        }
        else
        {
            try
            {
                excelParser analizador = new excelParser(System.in);
                analizador.Inicio();
            }
            catch (ParseException e)
            {
                System.out.println(e.getMessage());
                System.out.println("Errores------------------");
            }              
        }

    }

    void errorPanico(int tokenSinc) 
    { 
        ParseException e = generateParseException();     
        Token t; 
        do 
        {
            t = getNextToken();
        } 
        while (t.kind != tokenSinc);
    }

}
PARSER_END(excelParser)


/*
<ESTADO> -- ESTADO es el nombre del estado en el que vamos a declarar las reglas léxicas.
SKIP: ignora el no terminal
MORE: encicla en una producción 
TOKEN: tokens
TOKEN_ESPCIAL: saber
*/


TOKEN:
{
    <tipo:"tipo">:TIPO
}

SKIP:
{
    <(" " | "\t" | "\n" | "\r" )+>
}

<TIPO>TOKEN:
{
    <texto:"texto">
    |<entero:"entero">
    |<decimal:"decimal">
    |<rango:"rango">
    |<condicion:"condicion">
    |<fecha:"fecha">
    |<hora:"hora">
    |<fechahora:"fechahora">
    |<seleccionaUno:"selecciona_uno">
    |<seleccionaMultiple:"selecciona_multiple">
    |<nota:"nota">
    |<fichero:"fichero">
    |<calcular:"calcular">
    |<iniciar:"iniciar">:AGCI
    |<finalizar:"finalizar">:AGCI
}

<TIPO>TOKEN:
{
    <id:(<letra>)(<letra>|<digito>|"_")*  >
|   <#digito:["0" - "9"] > 
|   <#letra:["A"-"Z"]> 
|   <coma:",">
|   <punto:".">
}

<TIPO>SKIP:
{
    <(" " | "\t" | "\n" | "\r" )+>
}

// Agrupacion y Ciclo AGCI
<AGCI>SKIP:
{
    <(" " | "\t" | "\n" | "\r" )+>
}

<AGCI>TOKEN:
{
    <agrupacion:"agrupacion">
    |<ciclo:"ciclo">     
}


/*Area de analis sintactico. */
void Inicio():
{}
{
    (
    <tipo>Tipo()<EOF>{System.out.println("Celda tipo");}
    )+
}

void Tipo():
{}
{
     <texto>
    |<entero>
    |<decimal>
    |<rango>
    |<condicion>
    |<fecha>
    |<hora>
    |<fechahora>
    |<seleccionaUno><id>
    |<seleccionaMultiple><id>
    |<nota>    
    |<fichero>listaFormatos()
    |<calcular>
    |<iniciar>agci()    
    |<finalizar>agci()    
}

void agci():
{}
{
    <ciclo>
   |<agrupacion>
}

void listaFormatos():
{}
{
    "\""<punto><id>listaFormatos1()"\""
    |{System.out.println("Sin formatos");}
}

void listaFormatos1():
{}
{
    <coma><punto><id>listaFormatos1()
|   {System.out.println("Final fila");}
}


